<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Fraser's IdM Blog</title>
    <link href="https://frasertweedale.github.io/blog-redhat/atom.xml" rel="self" />
    <link href="https://frasertweedale.github.io/blog-redhat" />
    <id>https://frasertweedale.github.io/blog-redhat/atom.xml</id>
    <author>
        <name>Fraser Tweedale</name>
        <email>frase@frase.id.au</email>
    </author>
    <updated>2019-02-18T00:00:00Z</updated>
    <entry>
    <title>IP address SAN support in FreeIPA</title>
    <link href="https://frasertweedale.github.io/blog-redhat/posts/2019-02-18-freeipa-san-ip.html" />
    <id>https://frasertweedale.github.io/blog-redhat/posts/2019-02-18-freeipa-san-ip.html</id>
    <published>2019-02-18T00:00:00Z</published>
    <updated>2019-02-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="ip-address-san-support-in-freeipa">IP address SAN support in FreeIPA</h1>
<p>The X.509 <em>Subject Alternative Name (SAN)</em> certificate extension carries subject names that cannot (or cannot easily) be expressed in the Subject Distinguished Name field. The extension supports various name types, including DNS names (the most common), IP addresses, email addresses (for users) and Kerberos principal names, among others.</p>
<p>When issuing a certificate, FreeIPA has to validate that requested SAN name values match the principal to whom the certificate is being issued. There has long been support for DNS names, Kerberos and Microsoft principal names, and email addresses. Over the years we have received many requests to support IP address SAN names. And now we are finally <a href="https://pagure.io/freeipa/issue/7451">adding support</a>!</p>
<p>In this post I will explain the context and history of this feature, and demonstrate how to use it. At time of writing the work is <a href="https://github.com/freeipa/freeipa/pull/1843">not yet merged</a>, but substantive changes are not expected.</p>
<h2 id="acknowledgement">Acknowledgement</h2>
<p>First and foremost, I must thank <strong>Ian Pilcher</strong> who drove this work. DNS name validation is tricky, but Ian proposed a regime that was acceptable to the FreeIPA team from a philosophical and security standpoint. Then he cut the initial patch for the feature. The work was of a high quality; my subsequent changes and enhancements were minor. Above all, Ian and others had great patience as the pull request sat in limbo for nearly a year! Thank you Ian.</p>
<h2 id="ip-address-validation">IP address validation</h2>
<p>There is a reason we kicked the SAN IP address support can down the road for so long. Unlike some name types, validating IP addresses is far from straightforward.</p>
<p>Let’s first consider the already-supported name types. FreeIPA is an <em>identity management system</em>. It <em>knows</em> the various identities (principal name, email address, hostname) of the subjects/principals it knows about. Validation of these name types reduces to the question <em>“does this name belong to the subject principal object?”</em></p>
<p>For IP addresses is not so simple. There are several complicating factors:</p>
<ul>
<li>FreeIPA <em>can</em> manage DNS entries, but it doesn’t have to. If FreeIPA is not a source of authoritative DNS information, should it trust information from external resolvers? Only with DNSSEC?</li>
<li>There may be multiple, conflicting sources of DNS records. The DNS <em>view</em> presented to FreeIPA clients may differ from that seen by other clients. The FreeIPA DNS may “shadow” public (or other) DNS records.</li>
<li>For validation, what should be the treatment of forward (<code>A</code> / <code>AAAA</code>) and reverse (<code>PTR</code>) records pertaining to the names involved?</li>
<li>Should <code>CNAME</code> records be followed? How many times?</li>
<li>The issued certificate may be used in or presented to clients in environments with a different DNS view from the environment in which validation was performed.</li>
<li>Does the request have to come from, or does the requesting entity have to prove control of, the IP address(es) requested for inclusion in the certificate?</li>
<li>IP addresses often change and a reassigned much more often than the typical lifetime of a certificate.</li>
<li>If you query external DNS systems, how do you handle failures or slowness?</li>
<li>The need to mitigate DNS or BGP poisoning attacks</li>
</ul>
<p>Taking these factors into account, it is plain to see why we put this feature off for so long. It is just hard to determine what the correct behaviour should be. Nevertheless use cases exist so the feature request is legitimate. The difference with <span class="title-ref">Ian's RFE</span> was that he proposed a strict validation regime that only uses data defined in FreeIPA. It is a fair assumption that the data managed by a FreeIPA instance is <em>trustworthy</em>. That assumption, combined with some sanity checks, gives the validation requirements:</p>
<ol type="1">
<li>Only FreeIPA-managed DNS records are considered. There is no communication with external DNS resolvers.</li>
<li>For each IP address in the SAN, there is a DNS name in the SAN that resolves to it. (As an implementation decision, we permit one level of CNAME indirection).</li>
<li>For each IP address in the SAN, there is a valid PTR (reverse DNS) record.</li>
<li>SAN IP addresses are only supported for host and service principals.</li>
</ol>
<p>Requirement <strong>1</strong> avoids dealing with any conflicts or communication issues with external resolvers. Requirements <strong>2</strong> and <strong>3</strong> together enforce a tight association between the subject principal (every DNS name is verified to belong to it) and the IP address (through forward and reverse resolution to the DNS name(s)).</p>
<h3 id="caveats-and-limitations">Caveats and limitations</h3>
<p>FreeIPA’s SAN IP address validation regime leads to the following caveats and limitations:</p>
<ul>
<li>The FreeIPA DNS component must be used. (It can be enabled during installation, or at any time after installation.)</li>
<li>Forward and reverse records of addresses to be included in certificates must be added and maintained.</li>
<li>SAN IP addresses must be accompanied by at least one DNS name. Requests with <em>only</em> IP addresses will be rejected.</li>
</ul>
<p>SAN IP address names in general have some limitations, too:</p>
<ul>
<li>The addresses in the certificate were correct at validation time, but might have changed. The only mitigations are to use short-lived certificates, or revoke certificates if DNS changes render them invalid. There is no detection or automation to assist with that.</li>
<li>The certificate could be misused by services in other networks with the same IP address. A well-behaved client would still have to trust the FreeIPA CA in order for this impersonation attack to work.</li>
</ul>
<h2 id="comparison-with-the-public-pki">Comparison with the public PKI</h2>
<p>SAN IP address names are supported by browsers. The CA/Browser Forum’s <a href="https://cabforum.org/baseline-requirements-documents/">Baseline Requirements</a> permit publicly-trusted CAs to issue end-entity certificates with SAN IP address values. CAs have to verify that the applicant controls (or has been granted the right to use) the IP address. There are several acceptable verification methods:</p>
<ol type="1">
<li>The applicant make some agreed-upon change to a network resource at the IP address in question;</li>
<li>Consulting IANA or regional NIC assignment information;</li>
<li>Performing reverse lookup then verifying control over the DNS name.</li>
</ol>
<p>The IETF <em>Automated Certificate Management Environment (ACME)</em> working group has an <a href="https://tools.ietf.org/html/draft-ietf-acme-ip">Internet-Draft for automated IP address validation</a> in the ACME protocol. It defines an automated approach to method <strong>1</strong> above. SAN IP addresses are <a href="https://community.letsencrypt.org/t/certificate-for-public-ip-without-domain-name/6082/91">not yet supported</a> by the most popular ACME CA, <em>Let’s Encrypt</em> (and might never be).</p>
<p>Depending on an organisation’s security goals, the verification methods mentioned above may or may not be appropriate for enterprise use (i.e. behind the firewall). Likewise, the decision about whether a particular kind of validation could or should be automated might have different answers for different organisations. It is not really a question of technical constraints; rather, one of philosophy and security doctrine. When it comes to certificate request validation, the public PKI and FreeIPA are asking different questions:</p>
<ul>
<li>FreeIPA asks: <em>does the indicated subject principal own the requested names?</em></li>
<li>The public PKI asks: <em>does the (potentially anonymous) applicant control the names they’re requestion?</em></li>
</ul>
<p>In a few words, it’s <em>ownership</em> versus <em>control</em>. In the future it might be possible for a FreeIPA CA to ask the latter question and issue certificates (or not) accordingly. But that isn’t the focus right now.</p>
<h2 id="demonstration">Demonstration</h2>
<h3 id="preliminaries">Preliminaries</h3>
<p>The scene is set. Let’s see this feature in action! The domain of my FreeIPA deployment is <code>ipa.local</code>. I will add a host called <code>iptest.example.com</code>, with the IP address <code>192.168.2.1</code>. The first step is to add the reverse zone for this IP address:</p>
<pre><code>% ipa dnszone-add --name-from-ip 192.168.2.1
Zone name [2.168.192.in-addr.arpa.]:
  Zone name: 2.168.192.in-addr.arpa.
  Active zone: TRUE
  Authoritative nameserver: f29-0.ipa.local.
  Administrator e-mail address: hostmaster
  SOA serial: 1550454790
  SOA refresh: 3600
  SOA retry: 900
  SOA expire: 1209600
  SOA minimum: 3600
  BIND update policy: grant IPA.LOCAL krb5-subdomain 2.168.192.in-addr.arpa. PTR;
  Dynamic update: FALSE
  Allow query: any;
  Allow transfer: none;</code></pre>
<p>If the reverse zone for the IP address already exists, there would be no need to do this first step.</p>
<p>Next I add the host entry. Supplying <code>--ip-address</code> causes forward and reverse records to be added for the supplied address (assuming the relevant zones are managed by FreeIPA):</p>
<pre><code>% ipa host-add iptest.ipa.local \
      --ip-address 192.168.2.1
-----------------------------
Added host &quot;iptest.ipa.local&quot;
-----------------------------
  Host name: iptest.ipa.local
  Principal name: host/iptest.ipa.local@IPA.LOCAL
  Principal alias: host/iptest.ipa.local@IPA.LOCAL
  Password: False
  Keytab: False
  Managed by: iptest.ipa.local</code></pre>
<h3 id="csr-generation">CSR generation</h3>
<p>There are several options for creating a certificate signing request (CSR) with IP addresses in the SAN extension.</p>
<ul>
<li>Lots of devices (routers, middleboxes, etc) generate CSRs containing their IP address. This is the significant driving use case for this feature, but there’s no point going into details because every device is different.</li>
<li>The <a href="https://pagure.io/certmonger">Certmonger</a> utility makes it easy to add DNS names and IP addresses to a CSR, via command line arguments. Several other name types are also supported. See <code>getcert-request(1)</code> for details.</li>
<li>OpenSSL requires a config file to specify SAN values for inclusing in CSRs and certificates. See <code>req(1)</code> and <code>x509v3_config(5)</code> for details.</li>
<li>The NSS <code>certutil(1)</code> command provides the <code>--extSAN</code> option for specifying SAN names, including DNS names and IP addresses.</li>
</ul>
<p>For this demonstration I use NSS and <code>certutil</code>. First I initialise a new certificate database:</p>
<pre><code>% mkdir nssdb ; cd nssdb ; certutil -d . -N
Enter a password which will be used to encrypt your keys.
The password should be at least 8 characters long,
and should contain at least one non-alphabetic character.

Enter new password:
Re-enter password:</code></pre>
<p>Next, I generate a key and create CSR with the desired names in the SAN extension. We do not specify a key type or size we get the default (2048-bit RSA).</p>
<pre><code>% certutil -d . -R -a -o ip.csr \
      -s CN=iptest.ipa.local \
      --extSAN dns:iptest.ipa.local,ip:192.168.2.1
Enter Password or Pin for &quot;NSS Certificate DB&quot;:

A random seed must be generated that will be used in the
creation of your key.  One of the easiest ways to create a
random seed is to use the timing of keystrokes on a keyboard.

To begin, type keys on the keyboard until this progress meter
is full.  DO NOT USE THE AUTOREPEAT FUNCTION ON YOUR KEYBOARD!


Continue typing until the progress meter is full:

|************************************************************|

Finished.  Press enter to continue:


Generating key.  This may take a few moments...</code></pre>
<p>The output file <code>ip.csr</code> contains the generated CSR. Let’s use OpenSSL to pretty-print it:</p>
<pre><code>% openssl req -text &lt; ip.csr
Certificate Request:
    Data:
        Version: 1 (0x0)
        Subject: CN = iptest.ipa.local
        Subject Public Key Info:
            &lt; elided &gt;
        Attributes:
        Requested Extensions:
            X509v3 Subject Alternative Name:
                DNS:iptest.ipa.local, IP Address:192.168.2.1
    Signature Algorithm: sha256WithRSAEncryption
         &lt; elided &gt;</code></pre>
<p>It all looks correct.</p>
<h3 id="issuing-the-certificate">Issuing the certificate</h3>
<p>I use the <code>ipa cert-request</code> command to request a certificate. The host <code>iptest.ipa.local</code> is the subject principal. The default profile is appropriate.</p>
<pre><code>% ipa cert-request ip.csr \
      --principal host/iptest.ipa.local \
      --certificate-out ip.pem
  Issuing CA: ipa
  Certificate: &lt; elided &gt;
  Subject: CN=iptest.ipa.local,O=IPA.LOCAL 201902181108
  Subject DNS name: iptest.ipa.local
  Issuer: CN=Certificate Authority,O=IPA.LOCAL 201902181108
  Not Before: Mon Feb 18 03:24:48 2019 UTC
  Not After: Thu Feb 18 03:24:48 2021 UTC
  Serial number: 10
  Serial number (hex): 0xA</code></pre>
<p>The command succeeded. As requested, the issued certificate has been written to <code>ip.pem</code>. Again we’ll use OpenSSL to inspect it:</p>
<pre><code>% openssl x509 -text &lt; ip.pem
Certificate:                                                                                                                                                                                               [42/694]
    Data:
        Version: 3 (0x2)
        Serial Number: 10 (0xa)
        Signature Algorithm: sha256WithRSAEncryption
        Issuer: O = IPA.LOCAL 201902181108, CN = Certificate Authority
        Validity
            Not Before: Feb 18 03:24:48 2019 GMT
            Not After : Feb 18 03:24:48 2021 GMT
        Subject: O = IPA.LOCAL 201902181108, CN = iptest.ipa.local
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                RSA Public-Key: (2048 bit)
                Modulus:
                    &lt; elided &gt;
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Authority Key Identifier:
                keyid:70:C0:D3:02:EA:88:4A:4D:34:4C:84:CD:45:5F:64:8A:0B:59:54:71

            Authority Information Access:
                OCSP - URI:http://ipa-ca.ipa.local/ca/ocsp

            X509v3 Key Usage: critical
                Digital Signature, Non Repudiation, Key Encipherment, Data Encipherment
            X509v3 Extended Key Usage:
                TLS Web Server Authentication, TLS Web Client Authentication
            X509v3 CRL Distribution Points:

                Full Name:
                  URI:http://ipa-ca.ipa.local/ipa/crl/MasterCRL.bin
                CRL Issuer:
                  DirName:O = ipaca, CN = Certificate Authority

            X509v3 Subject Key Identifier:
                3D:A9:7E:E3:05:D6:03:6A:9E:85:BB:72:69:E1:E7:11:92:6F:29:08
            X509v3 Subject Alternative Name:
                DNS:iptest.ipa.local, IP Address:192.168.2.1
    Signature Algorithm: sha256WithRSAEncryption
         &lt; elided &gt;</code></pre>
<p>We can see that the Subject Alternative Name extension is present, and included the expected values.</p>
<h3 id="error-scenarios">Error scenarios</h3>
<p>It’s nice to see that we can get a certificate with IP address names. But it’s more important to know that we <em>cannot</em> get an IP address certificate when the validation requirements are not satisfied. I’ll run through a number of scenarios and show the results (without showing the whole procedure, which would repeat a lot of information).</p>
<p>If we omit the DNS name from the SAN extension, there is nothing linking the IP address to the subject principal and the request will be rejected. Note that the Subject DN Common Name (CN) attribute is ignored for the purposes of SAN IP address validation. The CSR was generated using <code>--extSAN ip:192.168.2.1</code>.</p>
<pre><code>% ipa cert-request ip-bad.csr --principal host/iptest.ipa.local
ipa: ERROR: invalid &#39;csr&#39;: IP address in
  subjectAltName (192.168.2.1) unreachable from DNS names</code></pre>
<p>If we reinstate the DNS name but add an extra IP address that does not relate to the hostname, the request gets rejected. The CSR was generated using <code>--extSAN dns:iptest.ipa.local,ip:192.168.2.1,ip:192.168.2.2</code>.</p>
<pre><code>% ipa cert-request ip-bad.csr --principal host/iptest.ipa.local
ipa: ERROR: invalid &#39;csr&#39;: IP address in
  subjectAltName (192.168.2.2) unreachable from DNS names</code></pre>
<p>Requesting a certificate for a user principal fails. The CSR has Subject DN <code>CN=alice</code> and the SAN extension contain an IP address. The user principal <code>alice</code> does exist.</p>
<pre><code>% ipa cert-request ip-bad.csr --principal alice
ipa: ERROR: invalid &#39;csr&#39;: subject alt name type
  IPAddress is forbidden for user principals</code></pre>
<p>Let’s return to our original, working CSR. If we alter the relevant PTR record so that it no longer points a DNS name in the SAN (or the canonical name thereof), the request will fail:</p>
<pre><code>% ipa dnsrecord-mod 2.168.192.in-addr.arpa. 1 \
      --ptr-rec f29-0.ipa.local.
  Record name: 1
  PTR record: f29-0.ipa.local.

% ipa cert-request ip.csr --principal host/iptest.ipa.local
ipa: ERROR: invalid &#39;csr&#39;: IP address in
  subjectAltName (192.168.2.1) does not match A/AAAA records</code></pre>
<p>Similarly if we delete the PTR record, the request fails (with a different message):</p>
<pre><code>% ipa dnsrecord-del 2.168.192.in-addr.arpa. 1 \
      --ptr-rec f29-0.ipa.local.
------------------
Deleted record &quot;1&quot;
------------------

% ipa cert-request ip.csr --principal host/iptest.ipa.local
ipa: ERROR: invalid &#39;csr&#39;: IP address in
  subjectAltName (192.168.2.1) does not have PTR record</code></pre>
<h3 id="ipv6">IPv6</h3>
<p>Assuming the relevant reverse zone is managed by FreeIPA and contains the correct records, FreeIPA can issue certificates with IPv6 names. First I have to add the relevant zones and records. I’m using the machine’s link-local address but the commands will be similar for other IPv6 addresses.</p>
<pre><code>% ipa dnsrecord-mod ipa.local. iptest \
      --a-rec=192.168.2.1 \
      --aaaa-rec=fe80::8f18:bdab:4299:95fa
  Record name: iptest
  A record: 192.168.2.1
  AAAA record: fe80::8f18:bdab:4299:95fa

% ipa dnszone-add \
      --name-from-ip fe80::8f18:bdab:4299:95fa
Zone name [0.0.0.0.0.0.0.0.0.0.0.0.0.8.e.f.ip6.arpa.]:
  Zone name: 0.0.0.0.0.0.0.0.0.0.0.0.0.8.e.f.ip6.arpa.
  Active zone: TRUE
  Authoritative nameserver: f29-0.ipa.local.
  Administrator e-mail address: hostmaster
  SOA serial: 1550468242
  SOA refresh: 3600
  SOA retry: 900
  SOA expire: 1209600
  SOA minimum: 3600
  BIND update policy: grant IPA.LOCAL krb5-subdomain 0.0.0.0.0.0.0.0.0.0.0.0.0.8.e.f.ip6.arpa. PTR;
  Dynamic update: FALSE
  Allow query: any;
  Allow transfer: none;

% ipa dnsrecord-add \
      0.0.0.0.0.0.0.0.0.0.0.0.0.8.e.f.ip6.arpa. \
      a.f.5.9.9.9.2.4.b.a.d.b.8.1.f.8 \
      --ptr-rec iptest.ipa.local.
  Record name: a.f.5.9.9.9.2.4.b.a.d.b.8.1.f.8
  PTR record: iptest.ipa.local.</code></pre>
<p>With these in place I’ll generate the CSR and issue the certificate. (This time I’ve used the <code>-f</code> and <code>-z</code> options to reduce user interaction.)</p>
<pre><code>% certutil -d . -f pwdfile.txt \
    -z &lt;(dd if=/dev/random bs=2048 count=1 status=none) \
    -R -a -o ip.csr -s CN=iptest.ipa.local \
    --extSAN dns:iptest.ipa.local,ip:fe80::8f18:bdab:4299:95fa


Generating key.  This may take a few moments...

% ipa cert-request ip.csr \
      --principal host/iptest.ipa.local \
      --certificate-out ip.pem
  Issuing CA: ipa
  Certificate: &lt; elided &gt;
  Subject: CN=iptest.ipa.local,O=IPA.LOCAL 201902181108
  Subject DNS name: iptest.ipa.local
  Issuer: CN=Certificate Authority,O=IPA.LOCAL 201902181108
  Not Before: Mon Feb 18 05:49:01 2019 UTC
  Not After: Thu Feb 18 05:49:01 2021 UTC
  Serial number: 12
  Serial number (hex): 0xC</code></pre>
<p>The issuance succeeded. Observe that the IPv6 address is present in the certificate:</p>
<pre><code>% openssl x509 -text &lt; ip.pem | grep -A 1 &quot;Subject Alt&quot;
    X509v3 Subject Alternative Name:
      DNS:iptest.ipa.local, IP Address:FE80:0:0:0:8F18:BDAB:4299:95FA</code></pre>
<p>Of course, it is possible to issue certificates with multiple IP addresses, including a mix of IPv4 and IPv6. Assuming all the necessary DNS records exist, with</p>
<pre><code>--extSAN ip:fe80::8f18:bdab:4299:95fa,ip:192.168.2.1,dns:iptest.ipa.local</code></pre>
<p>The resulting certificate will have the SAN:</p>
<pre><code>IP Address:FE80:0:0:0:8F18:BDAB:4299:95FA, IP Address:192.168.2.1, DNS:iptest.ipa.local</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>In this post I discussed the challenges of verifying IP addresses for inclusion in X.509 certificates. I discussed the approach we are taking in FreeIPA to finally support this, including its caveats and limitations. For comparison, I outlined how IP address verification is done by CAs on the open internet.</p>
<p>I then demonstrated how the feature will work in FreeIPA. Importantly, I showed (though not <em>exhaustively</em>), that FreeIPA refuses to issue the certificate if the verification requirements are not met. It is a bit hard to demonstrate, from a user perspective, that we only consult FreeIPA’s own DNS records and never consult another DNS server. But hey, <a href="https://github.com/freeipa/freeipa/pull/1843">the code is open source</a> so you can satisfy yourself that the behaviour fulfils the requirements (or leave a review / file an issue if you find that it does not!)</p>
<p>When will the feature land in <code>master</code>? Before the feature can be merged, I still need to write acceptance tests and have the feature reviewed by another FreeIPA developer. I am hoping to finish the work this week.</p>
<p>As a final remark, I must again acknowledge Ian Pilcher’s significant contribution. Were it not for him, it is likely that this longstanding RFE would still be in our <em>“too hard”</em> basket. Ian, thank you for your patience and I hope that your efforts are rewarded very soon with the feature finally being merged.</p>]]></summary>
</entry>
<entry>
    <title><code>staticmethod</code> considered beneficial</title>
    <link href="https://frasertweedale.github.io/blog-redhat/posts/2019-02-07-staticmethod-considered-beneficial.html" />
    <id>https://frasertweedale.github.io/blog-redhat/posts/2019-02-07-staticmethod-considered-beneficial.html</id>
    <published>2019-02-07T00:00:00Z</published>
    <updated>2019-02-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="staticmethod-considered-beneficial"><code>staticmethod</code> considered beneficial</h1>
<p>Some Python programmers hold that the <code>staticmethod</code> decorator, and to a lesser extent <code>classmethod</code>, are to be avoided where possible. This view is not correct, and in this post I will explain why.</p>
<p>This post will be useful to programmers in any language, but especially Python.</p>
<h2 id="the-constructions">The constructions</h2>
<p>I must begin with a brief overview of the <code>classmethod</code> and <code>staticmethod</code> constructions and their uses.</p>
<p><code>classmethod</code> is a function that transforms a method into a class method. The class method receives the <em>class object</em> as its first argument, rather than an <em>instance</em> of the class. It is typically used as a method <em>decorator</em>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">class</span> C:</a>
<a class="sourceLine" id="cb1-2" title="2">    <span class="at">@classmethod</span></a>
<a class="sourceLine" id="cb1-3" title="3">    <span class="kw">def</span> f(cls, arg1, arg2, ...): ...</a></code></pre></div>
<p>By idiom, the class object argument is bound to the name <code>cls</code>. You can invoke a class method via an instance (<code>C().f()</code>) or via the class object itself (<code>C.f()</code>). In return for this flexibility you give up the ability to access instance methods or attributes from the method body, even when it was called via an instance.</p>
<p><code>staticmethod</code> is nearly identical to <code>classmethod</code>. The only difference is that instead of receiving the class object as the first argument, it does not receive any implicit argument:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb2-1" title="1"><span class="kw">class</span> C:</a>
<a class="sourceLine" id="cb2-2" title="2">    <span class="at">@staticmethod</span></a>
<a class="sourceLine" id="cb2-3" title="3">    <span class="kw">def</span> f(arg1, arg2, ...): ...</a></code></pre></div>
<p>How are the <code>classmethod</code> and <code>staticmethod</code> constructions used? Consider the following (contrived) class:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">class</span> Foo(<span class="bu">object</span>):</a>
<a class="sourceLine" id="cb3-2" title="2"></a>
<a class="sourceLine" id="cb3-3" title="3">  <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, delta):</a>
<a class="sourceLine" id="cb3-4" title="4">    <span class="va">self</span>.delta <span class="op">=</span> delta</a>
<a class="sourceLine" id="cb3-5" title="5"></a>
<a class="sourceLine" id="cb3-6" title="6">  <span class="kw">def</span> forty_two(<span class="va">self</span>):</a>
<a class="sourceLine" id="cb3-7" title="7">    <span class="cf">return</span> <span class="dv">42</span></a>
<a class="sourceLine" id="cb3-8" title="8"></a>
<a class="sourceLine" id="cb3-9" title="9">  <span class="kw">def</span> answer(<span class="va">self</span>):</a>
<a class="sourceLine" id="cb3-10" title="10">    <span class="cf">return</span> <span class="va">self</span>.forty_two()</a>
<a class="sourceLine" id="cb3-11" title="11"></a>
<a class="sourceLine" id="cb3-12" title="12">  <span class="kw">def</span> modified_answer(<span class="va">self</span>):</a>
<a class="sourceLine" id="cb3-13" title="13">    <span class="cf">return</span> <span class="va">self</span>.answer() <span class="op">+</span> <span class="va">self</span>.delta</a></code></pre></div>
<p>There are some places we could use <code>staticmethod</code> and <code>classmethod</code>. Should we? Let’s just do it and discuss the impact of the changes:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb4-1" title="1"><span class="kw">class</span> Foo(<span class="bu">object</span>):</a>
<a class="sourceLine" id="cb4-2" title="2"></a>
<a class="sourceLine" id="cb4-3" title="3">  <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, delta):</a>
<a class="sourceLine" id="cb4-4" title="4">    <span class="va">self</span>.delta <span class="op">=</span> delta</a>
<a class="sourceLine" id="cb4-5" title="5"></a>
<a class="sourceLine" id="cb4-6" title="6">  <span class="at">@staticmethod</span></a>
<a class="sourceLine" id="cb4-7" title="7">  <span class="kw">def</span> forty_two():</a>
<a class="sourceLine" id="cb4-8" title="8">    <span class="cf">return</span> <span class="dv">42</span></a>
<a class="sourceLine" id="cb4-9" title="9"></a>
<a class="sourceLine" id="cb4-10" title="10">  <span class="at">@classmethod</span></a>
<a class="sourceLine" id="cb4-11" title="11">  <span class="kw">def</span> answer(cls):</a>
<a class="sourceLine" id="cb4-12" title="12">    <span class="cf">return</span> cls.forty_two()</a>
<a class="sourceLine" id="cb4-13" title="13"></a>
<a class="sourceLine" id="cb4-14" title="14">  <span class="kw">def</span> modified_answer(<span class="va">self</span>):</a>
<a class="sourceLine" id="cb4-15" title="15">    <span class="cf">return</span> <span class="va">self</span>.answer() <span class="op">+</span> <span class="va">self</span>.delta</a></code></pre></div>
<p><code>forty_two</code> became a static method, and it no longer takes any argument. <code>answer</code> became a class method, and its <code>self</code> argument became <code>cls</code>. It cannot become a static method, because it references <code>cls.forty_two</code>. <code>modified_answer</code> can’t change at all, because it references an instance attribute (<code>self.delta</code>). <code>forty_two</code> could have been made a class method, but just as it had no need of <code>self</code>, it has no need <code>cls</code> either.</p>
<p>There is an alternative refactoring for <code>forty_two</code>. Because it doesn’t reference anything in the class, we could have extracted it as a top-level function (i.e. defined not in the class but directly in a module). Conceptually, <code>staticmethod</code> and top-level functions are equivalent modulo namespacing.</p>
<p>Was the change I made a good one? Well, you already know my answer will be <em>yes</em>. Before I justify my position, let’s discuss some counter-arguments.</p>
<h2 id="why-not-staticmethod-or-classmethod">Why not <code>staticmethod</code> or <code>classmethod</code>?</h2>
<p>Most Python programmers accept that alternative constructors, factories and the like are legitimate applications of <code>staticmethod</code> and <code>classmethod</code>. Apart from these applications, opinions vary.</p>
<ul>
<li>For some folks, the above are the <em>only</em> acceptable uses.</li>
<li>Some accept <code>staticmethod</code> for grouping utility functions closely related to some class, into that class; others regard this kind of <code>staticmethod</code> proliferation as a code smell.</li>
<li>Some feel that anything likely to only ever be called on an instance should use instance methods, i.e. having <code>self</code> as the first argument, even when not needed.</li>
<li>The decorator syntax “noise” seems to bother some people</li>
</ul>
<p>Guido van Rossum, author and BDFL of Python, <a href="https://mail.python.org/pipermail/python-ideas/2012-May/014969.html">wrote</a> that static methods were an accident. History is interesting, sure, but not all accidents are automatically bad.</p>
<p>I am sympathetic to some of these arguments. A class with a lot of static methods might just be better off as a module with top-level functions. It is true that <code>staticmethod</code> is not required for anything whatsoever and could be dispensed with (this is not true of <code>classmethod</code>). And clean code is better than noisy code. Surely if you’re going to clutter your class with decorators, you want something in return right? Well, you do get something in return.</p>
<h2 id="deny-thy-self">Deny thy <code>self</code></h2>
<p>Let us put to the side the side-argument of <code>staticmethod</code> versus top-level functions. The real debate is <em>instance methods</em> versus <em>not instance methods</em>. This is the crux. Why avoid instance methods (where possible)? Because doing so is a win for readability.</p>
<p>Forget the contrived <code>Foo</code> class from above and imagine you are in a non-trivial codebase. You are hunting a bug, or maybe trying to understand what some function does. You come across an interesting function. It is 50 lines long. What does it do?</p>
<p>If you are reading an instance method, in addition to its arguments, the module namespace, imports and builtins, it has access to <code>self</code>, the instance object. If you want to know what the function does or doesn’t do, you’ll have to read it.</p>
<p>But if that function is a <code>classmethod</code>, you now have <em>more information</em> about this function—namely that it cannot access any instance methods, even if it was invoked on an instance (including from within a sibling instance method). <code>staticmethod</code> (or a top-level function) gives you a bit more than this: not even class methods can be accessed (unless directly referencing the class, which is easily detected and definitely a code smell). By using these constructions when possible, the programmer has less to think about as they read or modify the function.</p>
<p>You can flip this scenario around, too. Say you know a program is failing in some <em>instance</em> method, but you’re not sure how the problematic code is reached. Well, you can rule out the class methods and static methods straight away.</p>
<p>These results are similar to the result of <a href="http://citeseer.ist.psu.edu/viewdoc/download;jsessionid=F63444BB6DD3E18607EA7B3677036F09?doi=10.1.1.38.9875&amp;rep=rep1&amp;type=pdf">parametricity</a> in programming language theory. The profound and <em>actionable</em> observation in both settings is this: knowing <em>less</em> about something gives the programmer <em>more</em> information about its behaviour.</p>
<p>These might not seem like big wins. Because most of the time it’s only a small win. But it’s never a lose, and over the life of a codebase or the career of a programmer, the small readability wins add up. To me, this is a far more important goal than avoiding extra lines of code (decorator syntax), or spurning a feature because its author considers it an accident or it transgresses the <a href="https://www.python.org/dev/peps/pep-0020/">Zen of Python</a> or whatever.</p>
<p>But speaking of the Zen of Python…</p>
<blockquote>
<p>Readability counts.</p>
</blockquote>
<p>So use <code>classmethod</code> or <code>staticmethod</code> wherever you can.</p>]]></summary>
</entry>
<entry>
    <title>How does Dogtag PKI spawn?</title>
    <link href="https://frasertweedale.github.io/blog-redhat/posts/2019-02-04-dogtag-installation.html" />
    <id>https://frasertweedale.github.io/blog-redhat/posts/2019-02-04-dogtag-installation.html</id>
    <published>2019-02-04T00:00:00Z</published>
    <updated>2019-02-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="how-does-dogtag-pki-spawn">How does Dogtag PKI spawn?</h1>
<p>Dogtag PKI is a complex program. Anyone who has performed a standalone installation of Dogtag can attest to this (to say nothing of actually using it). The program you invoke to install Dogtag is called <code>pkispawn(8)</code>. When installing standalone, you invoke <code>pkispawn</code> directly. When FreeIPA installs a Dogtag instance, it invokes <code>pkispawn</code> behind the scenes.</p>
<p>So what does <code>pkispawn</code> actually <em>do</em>? In this post I’ll explain how <code>pkispawn</code> actually spawns a Dogtag instance. This post is not intended to be a guide to the many configuration options <code>pkispawn</code> knows about (although we’ll cover several). Rather, I’ll explain the actions <code>pkispawn</code> performs (or causes to be performed) to go from a fresh system to a working Dogtag CA instance.</p>
<p>This post is aimed at developers and support associates, and to a lesser extent, people who are trying to diagnose issues themselves or understand how to accomplish something fancy in their Dogtag installation. By explaining the steps involved in spawning a Dogtag instance, I hope to make it easier for readers to diagnose issues or implement fixes or enhancements.</p>
<h2 id="pkispawn-overview"><code>pkispawn</code> overview</h2>
<p><code>pkispawn(8)</code> is provided by the <code>pki-server</code> RPM (which is required by the <code>pki-ca</code> RPM that provides the CA subsystem).</p>
<p>You can invoke <code>pkispawn</code> without arguments, and it will prompt for the minimal data it needs to continue. These data include the subsystem to install (e.g. <code>CA</code> or <code>KRA</code>), and LDAP database connection details. For a fresh installation, most defaults are acceptable.</p>
<p>There are many ways to configure or customise an installation. A few important scenarios are:</p>
<ul>
<li>installing a <code>KRA</code>, <code>OCSP</code>, <code>TKS</code> or <code>TPS</code> subsystem associated with the existing <code>CA</code> subsystem (typically on the same machine as the <code>CA</code> subsystem).</li>
<li>installing a <em>clone</em> of a subsystem (typically on a different machine)</li>
<li>installing a CA subsystem with an externally-signed CA certificate</li>
<li>non-interactive installation</li>
</ul>
<p>For the above scenarios, and for many other possible variations, it is necessary to give <code>pkispawn</code> a configuration file. The <code>pki_default.cfg(5)</code> man page describes the format and available options. Some options are relevant to all subsystems, and others are subsystem-specific (i.e. only for <code>CA</code>, or <code>KRA</code>, etc.) Here is a basic configuration:</p>
<pre><code>[DEFAULT]
pki_server_database_password=Secret.123

[CA]
pki_admin_email=caadmin@example.com
pki_admin_name=caadmin
pki_admin_nickname=caadmin
pki_admin_password=Secret.123
pki_admin_uid=caadmin

pki_client_database_password=Secret.123
pki_client_database_purge=False
pki_client_pkcs12_password=Secret.123

pki_ds_base_dn=dc=ca,dc=pki,dc=example,dc=com
pki_ds_database=ca
pki_ds_password=Secret.123

pki_security_domain_name=EXAMPLE

pki_ca_signing_nickname=ca_signing
pki_ocsp_signing_nickname=ca_ocsp_signing
pki_audit_signing_nickname=ca_audit_signing
pki_sslserver_nickname=sslserver
pki_subsystem_nickname=subsystem</code></pre>
<p>The <code>-f</code> option tells <code>pkispawn</code> the configuration file to use. <code>-s CA</code> tell it install the CA subsystem.</p>
<pre><code>$ pkispawn -f ca.cfg -s CA</code></pre>
<p>For many more examples of how to install Dogtag subsystems for particular scenarios, see the <a href="https://www.dogtagpki.org/wiki/PKI_10_Installation">PKI 10 Installation guide</a> on the Dogtag wiki.</p>
<h2 id="terminology">Terminology</h2>
<p>It is worthwhile to clarify the meaning of some terms:</p>
<dl>
<dt><em>instance</em> or <em>installation</em></dt>
<dd><p>An installation of Dogtag on a particular machine. An instance may contain one or more <em>subsystems</em>. There may be more than one Dogtag instance on a single machine, although this is uncommon (and each instance must use a disjoint set of network ports). The default instance name is <code>pki-tomcat</code>.</p>
</dd>
<dt><em>subsystem</em></dt>
<dd><p>Each main function in Dogtag is provided by a subsystem. The subsystems are: <code>CA</code>, <code>KRA</code>, <code>OCSP</code>, <code>TKS</code> and <code>TPS</code>. Every Dogtag instance must have a <code>CA</code> subsystem (hence, the first subsystem installed must be the <code>CA</code> subsystem).</p>
</dd>
<dt><em>clone</em></dt>
<dd><p>For redundancy, a subsystem may be <em>cloned</em> to a different instance (usually on a different machine; this is not a technical requirement but it does not make sense to do otherwise). Different subsystems may have different numbers of clones in a topology.</p>
</dd>
<dt><em>topology</em> or <em>deployment</em></dt>
<dd><p>All of the clones of all subsystems derived from some original CA subsystem form a <em>deployment</em> or <em>topology</em>. Typically, each <em>instance</em> in the topology would have a replicated copy of the LDAP database.</p>
</dd>
</dl>
<h2 id="pkispawn-implementation"><code>pkispawn</code> implementation</h2>
<h3 id="two-main-phases">Two main phases</h3>
<p><code>pkispawn</code> has two main phases:</p>
<ol type="1">
<li>set up the Tomcat server and Dogtag application</li>
<li>send <em>configuration requests</em> to the Dogtag application, which performs further configuration steps.</li>
</ol>
<p>(This is not to be confused with a <em>two step</em> externally-signed CA installation.)</p>
<p>Of course there are many more steps than this. But there is an important reasons I am making such a high-level distinction: debugging. In the first phase <code>pkispawn</code> does everything. Any errors will show up in the <code>pkispawn</code> log file (<code>/var/log/pki/pki-&lt;subsystem&gt;-&lt;timestamp&gt;.log</code>). It is usually straightforward to work out what failed. <em>Why</em> it failed is sometimes easy to work out, and sometimes not so easy.</p>
<p>But in the second phase, <code>pkispawn</code> is handing over control to Dogtag to finish configuring itself. <code>pkispawn</code> sends a series of requests to the <code>pki-tomcatd</code> web application. These requests tell Dogtag to configure things like the database, security domain, and so on. If something goes wrong during these steps, you <em>might</em> see something useful in the <code>pkispawn</code> log, but you will probably also need to look at the Dogtag <code>debug</code> log, or even the Tomcat or Dogtag logs of another subsystem or clone. I detailed this (in the context of debugging clone installation failures) in <a href="">a previous post</a>.</p>
<h3 id="scriptlets">Scriptlets</h3>
<p><code>pkispawn</code> is implemented in Python. The various steps of installation are implemented as <em>scriptlets</em>: small subroutines that take care of one part of the installation. These are:</p>
<ol type="1">
<li><code>initialization</code>: sanity check and normalise installer configuration, and sanity check the system environment.</li>
<li><code>infrastructure_layout</code>: create PKI instance directories and configuration files.</li>
<li><code>instance_layout</code>: lay out the Tomcat instance and configuration files (skipped when spawning a second subsystem on an existing instance).</li>
<li><code>subsystem_layout</code>: lay out subsystem-specific files and directories.</li>
<li><code>webapp_deployment</code>: deploy the Tomcat web application.</li>
<li><code>security_databases</code>: set up the main Dogtag NSS database, and a client database where the administrator key and certificate will be created.</li>
<li><code>selinux_setup</code>: establish correct SELinux contexts on instance and subsystem files.</li>
<li><code>keygen</code>: generate keys and CSRs for the subsystem (for the CA subsystem, this inclues the CA signing key and CSR for external signing).</li>
<li><code>configuration</code>: For external CA installation, import the externally-signed CA certificate and chain. (Re)start the <code>pki-tomcatd</code> instance and send configuration requests to the Java application. The whole second phase discussed in the previous section occurs here. It will be discussed in more detail in the next section.</li>
<li><code>finalization</code>: enable PKI to start on boot (by default) and optionally purge client NSS databases that were set up during installation.</li>
</ol>
<p>For a two-step externally-signed CA installation, the <code>configuration</code> and <code>finalization</code> scriptlets are skipped during step 1, and in step 2 the scriptlets up to and including <code>keygen</code> are skipped. (A bit of hand-waving here; they not not really skipped but return early).</p>
<p>In the codebase, scriptlets are located under <code>base/server/python/pki/server/deployment/scriptlets/&lt;name&gt;.py</code>. The list of scriptlets and the order in which they’re run is given by the <code>spawn_scriplets</code> variable in <code>base/server/etc/default.cfg</code>. Note that <code>scriplet</code> there is not a typo. Or maybe it is, but it’s not <em>my</em> typo. In some parts of the codebase, we say <em>scriplet</em>, and in others it’s <em>scriptlet</em>. This is mildly annoying, but you just have to be careful to use the correct class or variable name.</p>
<p>Some other Python files contain a lot of code used during deployment. It’s not reasonable to make an exhaustive list, but <code>pki.server.deployment.pkihelper</code> and <code>pki.server.deployment.pkiparser</code> in particular include a lot of configuration processing code. If you are implementing or changing <code>pkispawn</code> configuration options, you’ll be defining them and following changes around in these files (and possibly others), as well as in <code>base/server/etc/default.cfg</code>.</p>
<h4 id="scriptlets-and-uninstallation">Scriptlets and uninstallation</h4>
<p>The installation scriptlets also implement corresponding uninstallation behaviours. When uninstalling a Dogtag instance or subsystem via the <code>pkidestroy</code> command, each scriptlets’ uninstallation behaviour is invoked. The order in which they’re invoked is different from installation, and is given by the <code>destroy_scriplets</code> variable in <code>base/server/etc/default.cfg</code>.</p>
<h3 id="configuration-requests">Configuration requests</h3>
<p>The <code>configuration</code> scriptlet sends a series of configuration requests to the Dogtag web API. Each request causes Dogtag to perform specific configuration behaviour(s). Depending on the subsystem being installed and whether it is a clone, these steps may including communication with other subsystems or instances, and/or the LDAP database.</p>
<p>The requests performed, in order, are:</p>
<ol type="1">
<li><code>/rest/installer/configure</code>: configure (but don’t yet create) the security domain. Import and verify certificates. If creating a clone, request number range allocations from the master.</li>
<li><code>/rest/installer/setupDatabase</code>: add database connection configuration to <code>CS.cfg</code>. Enable required DS plugins. Populate the database. If creating a clone, initialise replication (this can be suppressed if replication is managed externally, as is the case for FreeIPA in Domain Level 1). Populate VLV indices.</li>
<li><code>/rest/installer/configureCerts</code>: configure system certificates, generating keys and issuing certificates where necessary.</li>
<li><code>/rest/installer/setupAdmin</code> (skipped for clones): create admin user and issue certificate.</li>
<li><code>/rest/installer/backupKeys</code> (optional): back up system certificates and keys to a PKCS #12 file.</li>
<li><code>/rest/installer/setupSecurityDomain</code>: create the security domain data in LDAP (non-clone) or add the new clone to the security domain.</li>
<li><code>/rest/installer/setupDatabaseUser</code>: set up the LDAP database user, including certificate (if configured). This is the user that Dogtag uses to bind to LDAP.</li>
<li><code>/rest/installer/finalizeConfiguration</code>: remove <em>preop</em> configuration entries (which are only used during installation) and perform other finalisation in <code>CS.cfg</code>.</li>
</ol>
<p>For all of these requests, the <code>configuration</code> scriptlet builds the request data according to the <code>pkispawn</code> configuration. Then it sends the request to the current hostname. Communications between <code>pkispawn</code> and Tomcat are unlikely to fail (connection failure would suggest a major network configuration problem).</p>
<p>If something goes wrong during processing of the request, errors should appear in the subsystem debug log (<code>/etc/pki/pki-tomcat/ca/debug.YYYY-MM-DD.log</code>; <code>/etc/pki/pki-tomcat/ca/debug</code> on older versions), or the system journal. If the local system had to contact other subsystems or instances on other hosts, it may be necessary to look at the debug logs, system journal or Tomcat / Apache httpd logs of the relevant host / subsystem. I wrote about this at length in <a href="">a previous post</a> so I won’t say more about it here.</p>
<p>In terms of the code, the resource paths and servlet interface are defined in <code>com.netscape.certsrv.system.SystemConfigResource</code>. The implementation is in <code>com.netscape.certsrv.system.SystemConfigService</code>, with a considerable amount of behaviour residing as helper methods in <code>com.netscape.cms.servlet.csadmin.ConfigurationUtils</code>. If you are investigating or fixing configuration request failures, you will spend a fair bit of time grubbing around in these classes.</p>
<h2 id="conclusion">Conclusion</h2>
<p>As I have shown in this post, spawning a Dogtag PKI instance involves a lot of steps. There are many, <em>many</em> ways to customise the installation and I have glossed over many details. But my aim in this post was not to be a comprehensive reference guide or how-to. Rather the intent was to give a high-level view of what happens during installation, and how those behaviours are implemented. Hopefully I have achieved that, and as a result you are now able to more easily diagnose issues or implement changes or features in the Dogtag installer.</p>]]></summary>
</entry>
<entry>
    <title>X.509 Name Constraints and FreeIPA</title>
    <link href="https://frasertweedale.github.io/blog-redhat/posts/2019-01-29-name-constraints.html" />
    <id>https://frasertweedale.github.io/blog-redhat/posts/2019-01-29-name-constraints.html</id>
    <published>2019-01-29T00:00:00Z</published>
    <updated>2019-01-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="x.509-name-constraints-and-freeipa">X.509 Name Constraints and FreeIPA</h1>
<p>The X.509 <em>Name Constraints</em> extension is a mechanism for constraining the name space(s) in which a <em>certificate authority (CA)</em> may (or may not) issue <em>end-entity</em> certificates. For example, a CA could issue to <em>Bob’s Widgets, Inc</em> a contrained CA certificate that only allows the CA to issue server certificates for <code>bobswidgets.com</code>, or subdomains thereof. In a similar way, an enterprise root CA could issue constrained certificates to different departments in a company.</p>
<p>What is the advantage? Efficiency can be improved without sacrificing security by enabling <em>scoped</em> delegation of certificate issuance capability to subordinate CAs controlled by different organisations. The name constraints extension is essential for the security of such a mechanism. The <em>Bob’s Widgets, Inc</em> CA must not be allowed to issue valid certificates for <code>google.com</code> (and vice versa!)</p>
<p>FreeIPA supports installation with an externally signed CA. It is possible that such a CA certificate could have a name constraints extension, defined and imposed by the external issuer. Does FreeIPA support this? What are the caveats? In this blog post I will describe in detail how Name Constraints work and the state of FreeIPA support. Along the way I will dive into the state of Name Constraints verfication in the NSS security library. And I will conclude with a discussion of limitations, alternatives and complementary controls.</p>
<h2 id="name-constraints">Name Constraints</h2>
<p>The Name Constraints extension is <a href="https://tools.ietf.org/html/rfc5280#section-4.2.1.10">defined in RFC 5280</a>. Just as the <em>Subject Alternative Name (SAN)</em> is a list of <code>GeneralName</code> values with various possible types (DNS name, IP address, DN, etc), the Name Constraints extension also contains a list of <code>GeneralName</code> values. The difference is in interpretation. In the Name Constraints extension:</p>
<ul>
<li>A DNS name means that the CA may issue certificates with DNS names in the given domain, or a subdomain of arbitrary depth.</li>
<li>An IP address is interpreted as a CIDR address range.</li>
<li>A directory name is interpreted as a base DN.</li>
<li>An RFC822 name can be a single mailbox, all mailboxes at a particular host, or all mailboxes at a particular domain (including subdomains).</li>
<li>The <code>SRVName</code> name type, and corresponding Name Constraints matching rules, are defined in <a href="https://tools.ietf.org/html/rfc4985#section-4">RFC 4985</a>.</li>
</ul>
<p>There are other rules for other name types, but I won’t elaborate them here.</p>
<p>In X.509 terminology, these name spaces are called <em>subtrees</em>. The Name Constraints extension can define <em>permitted subtrees</em> and/or <em>excluded subtrees</em>. Permitted subtrees is more often used because it defines what is allowed, and anything not explicitly allowed is prohibited. It is possible for a single Name Constraints extension to define both permitted and excluded subtrees. But I have never seen this in the wild, and I will not bother explaining the rules.</p>
<p>When validating a certificate, the Name Constraints subtrees of all CA certificates in the certification path are merged, and the certificate is checked against the merged results. Name values in the SAN extension are compared to Name Constraint subtrees of the same type (the comparison rules differ for each name type.)</p>
<p>In addition to comparing SAN names against Name Constraints, there are a couple of additional requirements:</p>
<ul>
<li><code>directoryName</code> constraints are checked against the whole Subject DN, in additional to <code>directoryName</code> SAN values.</li>
<li><code>rfc822Name</code> constraints are checked against the <code>emailAddress</code> Subject DN attribute (if present) in addition to <code>rfc822Name</code> SAN values. (Use of the <code>emailAddress</code> attribute is deprecated in favour of <code>rfc822Name</code> SAN values.)</li>
</ul>
<p>Beyond this, because of the legacy <em>de facto</em> use of the Subject DN CN attribute to carry DNS names, several implementations check the CN attribute against <code>dnsName</code> constraints. This behaviour is not defined (let alone required) by RFC 5280. It is reasonable behaviour when dealing with server certificates. But we will see that this behaviour can lead to problems in other scenarios.</p>
<p>It is important to mention that nothing prevents a constrained CA from issuing a certificate that violates its Name Constraints (either direct or transitive). Validation must be performed by a client. If a client does not validate Name Constraints, then even a (trusted) issuing CA with a <code>permittedSubtrees</code> <code>dnsName</code> constraint of <code>bobswidgets.com</code> could issue a certificate for <code>google.com</code> and the client will accept it. Fortunately, modern web browsers strictly enforce DNS name constraints. For other clients, or other name types, Name Constraint enforcement support is less consistent. I haven’t done a thorough survey yet but you should make your own investigations into the state of Name Constraint validation support in libraries or programs relevant to your use case.</p>
<h2 id="freeipa-support-for-constrained-ca-certificates">FreeIPA support for constrained CA certificates</h2>
<p>It is common to deploy FreeIPA with a subordinate CA certificate signed by an external CA (e.g. the organisation’s Active Directory CA). If the FreeIPA deployment controls the <code>ipa.bobswidgets.com</code> subdomain, then it is reasonable for the CA administrator to issue the FreeIPA CA certificate with a Name Constraints <code>permittedSubtree</code> of <code>ipa.bobswidgets.com</code>. Will this work?</p>
<p>The most important thing to consider is that all names in all certificates issued by the FreeIPA CA must conform to whatever Name Constraints are imposed by the external CA. Above all else, the constraints must permit all DNS names used by the IPA servers across the whole topology. Support for DNS name constraint enforcement is widespread, so if this condition is not met, nothing with work. Most likely not even installation with succeed. So if the permitted <code>dnsName</code> constraint is <code>ipa.bobswidgets.com</code>, then every server hostname must be in that subtree. Likewise for SRV names, RFC822 names and so on.</p>
<p>In a typical deployment scenario this is not a burdensome requirement. And if the requirements change (e.g. needing to add a FreeIPA replica with a hostname excluded by Name Constraints) then the CA certificate could be re-issued with an updated Name Constraints extension to allow it. In some use cases (e.g. FreeIPA issuing certificates for cloud services), Name Constraints in the CA certificate may be untenable.</p>
<p>If the external issuer imposes a <code>directoryName</code> constraint, more care must be taken, because as mentioned above, these constraints apply to the Subject DN of issued certificates. The deployment’s <em>subject base</em> (an installation parameter that defines the base subject DN used in all default certificate profiles) must correspond to the <code>directoryName</code> constraint. Also, the Subject DN configuration for custom certificate profiles must correspond to the constraint.</p>
<p>If all of these conditions are met, then there should be no problem having a constrained FreeIPA CA.</p>
<h2 id="a-wild-name-constraint-validation-bug-appears">A wild Name Constraint validation bug appears!</h2>
<p>You didn’t think the story would end there, did you? As is often the case, my study of some less commonly used feature of X.509 was inspired by a customer issue. The customer’s external CA issued a CA certificate with <code>dnsName</code> and <code>directoryName</code> constraints. The <code>permittedSubtree</code> values were reasonable. Everything looked fine, but nothing worked (not even installation). Dogtag would not start up, and the debug log showed that the startup self-test was complaining about the OCSP signing certificate:</p>
<pre><code>The Certifying Authority for this certificate is not
permitted to issue a certificate with this name.</code></pre>
<p>Adding to the mystery, when the <code>certutil(1)</code> program was used to validate the certificate, the result was success:</p>
<pre><code># certutil -V -e -u O \
  -d /etc/pki/pki-tomcat/alias \
  -f /etc/pki/pki-tomcat/alias/pwdfile.txt \
  -n &quot;ocspSigningCert cert-pki-ca&quot;
certutil: certificate is valid</code></pre>
<p>Furthermore, the customer was experiencing (and I was also able to reproduce) the issue on RHEL 7, but I could not reproduce the issue on recent versions of Fedora or the RHEL 8 beta.</p>
<p><code>directoryName</code> constraints are uncommon (relative to <code>dnsName</code> constraints). And having in my past encountered many issues caused by DN string encoding mismatches (a valid scenario, but some libraries do not handle it correctly), my initial theory was that this was the cause. Dogtag uses the NSS security library (via the JSS binding for Java), and a search of the NSS commit log uncovered an interesting change that supported my theory:</p>
<pre><code>Author: David Keeler &lt;dkeeler@mozilla.com&gt;
Date:   Wed Apr 8 16:17:39 2015 -0700

  bug 1150114 - allow PrintableString to match UTF8String
                in name constraints checking r=briansmith</code></pre>
<p>On closer examination however, this change affected code in the <em>mozpkix</em> library (part of NSS), which is not invoked by the certificate validation routines used by Dogtag and <code>certutil</code> program. But if the <em>mozpkix</em> Name Constraint validation code was not being used, where was the relevant code.</p>
<h3 id="finding-the-source-of-the-problem">Finding the source of the problem</h3>
<p>Some more reading of NSS code showed that the error originated in <em>libpkix</em> (also part of NSS).</p>
<p>To work out why <code>certutil</code> was succeeding where Dogtag was failing, I launched <code>certutil</code> in a debugger to see what was going on. Eventually I reached the following routine:</p>
<pre><code>SECStatus
cert_VerifyCertChain(CERTCertDBHandle *handle, CERTCertificate *cert,
                     PRBool checkSig, PRBool *sigerror,
                     SECCertUsage certUsage, PRTime t, void *wincx,
                     CERTVerifyLog *log, PRBool *revoked)
{
  if (CERT_GetUsePKIXForValidation()) {
    return cert_VerifyCertChainPkix(cert, checkSig, certUsage, t,
                                    wincx, log, sigerror, revoked);
  }
  return cert_VerifyCertChainOld(handle, cert, checkSig, sigerror,
}</code></pre>
<p>OK, now I was getting somewhere. It turns out that during library initialisation, NSS reads the <code>NSS_ENABLE_PKIX_VERIFY</code> environment variable and sets a global variable, the value of which determines the return value of <code>CERT_GetUsePKIXForValidation()</code>. The behaviour can also be controlled explicitly via <code>CERT_SetUsePKIXForValidation(PRBool enable)</code>.</p>
<p>When invoking <code>certutil</code> ourselves, this environment variable was not set so “old” validation subroutine was invoked. Both routines performs cryptographic validation of a certification path to a trusted CA, and several other important checks. But it seems that the <em>libpkix</em> routine is more thorough, performing Name Constraints checks, as well as OCSP and perhaps other checks that are not also performed by the “old” subroutine.</p>
<p>If an environment variable or explicit library call is required to enable <em>libpkix</em> validation, why was the error occuring in Dogtag? The answer is simple: as part of <code>ipa-server-install</code>, we update <code>/etc/sysconfig/pki-tomcat</code> to set <code>NSS_ENABLE_PKIX_VERIFY=1</code> in Dogtag’s process environment. This was implemented a few years ago to support OCSP validation of server certificates in connections made by Dogtag (e.g. to the LDAP server).</p>
<h3 id="the-bug">The bug</h3>
<p>Stepping through the code revealed the true nature of the bug. <em>libpkix</em> Name Constraints validation treats the Common Name (CN) attribute of the Subject DN as a DNS name for the purposes of name constraints validation. I already mentioned that this is reasonable behaviour for server certificates. But <em>libpkix</em> has this behaviour for <em>all end-entity certiticates</em>. For an OCSP signing certificate, whose CN attribute carries no special meaning (formally or conventially), this behaviour is wrong. And it is the bug at the root of this problem. I filed a <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1523484">bug in the Mozilla tracker</a> along with a patch—my attempt at fixing the issue. Hopefully a fix can be merged soon.</p>
<h3 id="why-no-failure-on-newer-releases">Why no failure on newer releases?</h3>
<p>The issue does not occur on Fedora &gt;= 28 (or maybe earlier, but I haven’t tested), nor the RHEL 8 beta. So was there already a fix for the issue in NSS, or did something change in Dogtag, FreeIPA or elsewhere?</p>
<p>In fact, the change was in Dogtag. In recent versions we switched to a less comprehensive certificate validation routine—one that does not use <em>libpkix</em>. This is just the default behaviour; the old behaviour can still be enabled. We made this change because in some scenarios the OCSP checking performed by <em>libpkix</em> causes Dogtag startup to hang. Because the OCSP server it is trying to reach to validate certificates during start self-test <em>is the same Dogtag instance that is starting up!</em> Because of the change to the self-test validation behaviour, FreeIPA deployments on Fedora &gt;= 28 and RHEL 8 beta do not experience this issue.</p>
<h3 id="workaround">Workaround?</h3>
<p>If you were experiencing this issue in an existing release (e.g. because you <em>renewed</em> the CA certificate on your <em>existing</em> FreeIPA deployment, and the Name Constraints <em>appeared on the new certificate</em>), an obvious workaround would be to remove the environment variable from <code>/etc/sysconfig/pki-tomcat</code>. That would work, and the change will persist even after an <code>ipa-server-upgrade</code>. But that assumes you already had a working installation. Which the customer doesn’t have, becaues installation itself is failing. So apart from modifying the FreeIPA code to avoid setting this environment variable in the first place, I don’t yet know of a reliable workaround.</p>
<p>This concludes the discussion of constrained CA certificate support in FreeIPA.</p>
<h2 id="limitiations-alternatives-and-related-topics">Limitiations, alternatives and related topics</h2>
<p>Name Constraints only constrains names. There are other ways you might want to constrain a CA. For example: <em>can only issue certificates with validity period &lt;= δ</em>, or <em>can only issue certificates with Extended Key Usages ∈ S</em>. But there exists no mechanism for constraining CAs in such ways.</p>
<p>Not all defined <code>GeneralName</code> types have Name Constraints syntax and semantics defined for them. Documents that define <code>otherName</code> types <em>may</em> define corresponding Name Constraints matching rules, but are not required to. For example <a href="https://tools.ietf.org/html/rfc4985#section-4">RFC 4985</a>, which defines the <code>SRVName</code> type, also defines Name Constraints rules for it. But <a href="https://tools.ietf.org/html/rfc4556">RFC 4556</a>, which specifies the Kerberos PKINIT protocol, defines the <code>KRB5PrincipalName</code> <code>otherName</code> type but no Name Constraints semantics.</p>
<p>For applications where the set of domains (or other names) is volatile, a constrained CA certificate is likely to be more of a problem than a solution. An example might be a cloud or Platform-as-a-Service provider wanting to issue certificates on behalf of customers, who bring their own domains. For this use case it would be better to use an existing CA that supports automated domain validation and issuance, such as <a href="https://letsencrypt.org/">Let’s Encrypt</a>.</p>
<p>Name Constraints say which names a CA is or is not allowed to issue certificates for. But this restriction is controlled by the superior CA(s), not the end-entity. Interestingly there is a way for a domain owner to indicate which CAs are authorised to issue certificates for names in the domain. The DNS <a href="https://tools.ietf.org/html/rfc6844">CAA record (RFC 6844)</a> can anoint one more CAs, implicitly prohibiting other CAs from issuing certificates for that domain. The CA itself can check for these records, as a control against mis-issuance. For publicly-trusted CAs, the CA-Browser Forum <em>Baseline Requirements</em> <strong>requires</strong> CAs to check and obey CAA records. DNSSEC is recommended but not required.</p>
<p>CAA is an <em>authorisation</em> control—relying parties do not consult or care about CAA records when verifying certificates. The verification counterpart of CAA is <em>DANE—DNS-based Authentication of Named Entities</em>, defined in <a href="https://tools.ietf.org/html/rfc6698">RFC 6698</a>. Like CAA, DANE uses DNS (the <em>TLSA</em> record type), but DNSSEC is required. TLSA records can be used to indicate the authorised CA(s) for a certificate. Or they can specify the exact certificate(s) for the domain, a kind of <em>certificate pinning</em>. So DANE can work hand-in-hand with the existing public PKI infrastructure, or it can do an end-run around it. Depending on who you talk to, the reliance on DNSSEC makes it a non-starter, or humanity’s last hope! In any case, support is not yet widespread. Today DANE can be used in some browsers via add-ons, and the OpenSSL and GnuTLS libraries have some support.</p>
<p>Nowadays all publicly-trusted CAs, and some private PKIs, log all issued certificates to <em>Certificate Transparency (CT)</em> logs. These logs are auditable (publicly if the log is public), cryptographically verifiable logs of CA activity. CT was imposed after the detection of many serious misissuances by several publicly-trusted CAs (most of whom are no longer trusted by anyone). Now, even failure to log a certificate to a CT log is reason enough to revoke trust (because <em>what else</em> might they have failed to log? Certificates for <code>google.com</code> or <code>yourbank.ch</code>?) What does CT have to do with Name Constraints? When you consider that client Name Constraints validation support is patchy at best, a CT-based logging and audit solution is a credible alternative to Name Constraints, or at least a valuable complementary control.</p>
<h2 id="conclusion">Conclusion</h2>
<p>So, we have looked at what the Name Constraints extension does, and why it can be useful. We have discussed its limitations and some alternative or related mechanisms. We looked at the state of FreeIPA support, and did a deep dive into NSS to investigate the one bug that seems to be getting in the way.</p>
<p>Name Constraints is one of the many complex features that makes X.509 both so versatile yet so painful to work with. It’s a necessary feature, but support is not consistent and where it exists, there are usually bugs. Although I did discuss some “alternatives”, a big reason you might look for an alternative is because the support is not great in the first place. In my opinion, the best way forward is to ensure Name Constraints validation is performed more often, and more correctly, while (separately) preparing the way for comprehensive CT logging in enterprise CAs. A combination of monitoring (CT) and validation controls (browsers correctly validating names, Name Constraints and requiring evidence of CT logging) seems to be improving security in the public PKI. If we fix the client libraries and make CT logging and monitoring easy, it could work well for enterprise PKIs too.</p>]]></summary>
</entry>
<entry>
    <title>Diagnosing Dogtag cloning failures</title>
    <link href="https://frasertweedale.github.io/blog-redhat/posts/2018-11-30-dogtag-clone-failure-debugging.html" />
    <id>https://frasertweedale.github.io/blog-redhat/posts/2018-11-30-dogtag-clone-failure-debugging.html</id>
    <published>2018-11-30T00:00:00Z</published>
    <updated>2018-11-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="diagnosing-dogtag-cloning-failures">Diagnosing Dogtag cloning failures</h1>
<p>Sometimes, creating a Dogtag clone or a FreeIPA CA replica fails. I worked with Dogtag and FreeIPA for nearly five years. Over these years I’ve analysed a lot of these clone/replica installation failures and internalised a lot of knowledge about how cloning works, and how it can break. Often when I read a problem report and inspect the logs I quickly get a “gut feeling” about the cause. The purpose of this post is to <em>externalise</em> my internal intuition so that others can benefit. Whether you are an engineer or not, this post explains what you can do to get to the bottom of Dogtag cloning failures faster.</p>
<h2 id="how-dogtag-clones-are-created">How Dogtag clones are created</h2>
<p>Some notes about terminology: in FreeIPA we talk about <em>replicas</em>, but in Dogtag we say <em>clones</em>. These terms mean the same thing. When you create a FreeIPA CA replica, FreeIPA creates a clone of the Dogtag CA instance behind the scenes. I will use the term <em>master</em> to refer to the server from which the clone/replica is being created.</p>
<p>The <code>pkispawn(8)</code> program, depending on its configuration, can be used to create a new Dogtag subsystem or a clone. <code>pkispawn</code>, a Python program, manages the whole clone creation process, with the possible exception of setting up LDAP database and replication. But some stages of the configuration are handled by the Dogtag server itself (thus implemented in Java). Furthermore, the Dogtag server on the <em>master</em> must service some requests to allow the new clone to integrate into the topology.</p>
<p>The high level procedure of CA cloning is roughly:</p>
<ol>
<li>(<code>ipa-replica-install</code>) Create temporary Dogtag admin user account and add to relevant groups</li>
<li>(<code>ipa-replica-install</code> or <code>pkispawn</code>) Establish LDAP replication of the Dogtag database</li>
<li>(<code>pkispawn</code>) Extract private keys and system certifiates into Dogtag’s NSSDB</li>
<li>(<code>pkispawn</code>) Lay out the Dogtag instance on the filesystem</li>
<li>(<code>pkispawn</code>) Start the <code>pki-tomcatd</code> instance</li>
<li>(<code>pkispawn</code>) Send a <em>configuration request</em> to the new Dogtag instance
<ol>
<li>(<code>pki-tomcatd</code> on <em>clone</em>) Send <em>security domain</em> login request to master (using temporary admin user credentials)</li>
<li>(<code>pki-tomcatd</code> on <em>master</em>) Authenticate user, return cookie.</li>
<li>(<code>pki-tomcatd</code> on <em>clone</em>) Send number range requests to master</li>
<li>(<code>pki-tomcatd</code> on <em>master</em>) Service number range requests for clone</li>
</ol></li>
<li>(<code>ipa-replica-install</code>) remove temporary admin user account</li>
</ol>
<p>There are several places a problem could occur: in <code>pkispawn</code>, <code>pki-tomcatd</code> on the clone, or <code>pki-tomcatd</code> on the master. Therefore, depending on what failed, the best data about the failure could be in <code>pkispawn</code> output/logs, the Dogtag <code>debug</code> log on the replica, or the master, or even the system journal on either of the hosts. <strong>Recommendation:</strong> when analysing Dogtag cloning or FreeIPA CA replica installation failures, inspect <em>all of these logs</em>. It is often not obvious where the error is occurring, or what caused it. Having all these log files helps a lot.</p>
<h2 id="case-studies">Case studies</h2>
<h3 id="failure-to-set-up-replication">Failure to set up replication</h3>
<p><strong>Description</strong>: <code>ipa-replica-install</code> or <code>pkispawn</code> fail with errors related to replication (failure to establish). I don’t know how common this is in production environments. I’ve encountered it in my development environments. I <em>think</em> it is usually caused by stale replication agreements or something of that nature.</p>
<p><strong>Workaround</strong>: A “folk remedy”: uninstall and clean up the instance, then try again. Most often the error does not recur.</p>
<h3 id="replication-races">Replication races</h3>
<p><strong>Description:</strong> <code>pkispawn</code> fails; <em>replica</em> <code>debug</code> log indicates security domain login failure; <em>master</em> <code>debug</code> log indicates user unknown; <code>debug</code> log indicates token/session unkonwn</p>
<p>During cloning, the <em>clone</em> adds LDAP objects in its own database. It then performs requests against the <em>master</em>, assuming that those objects (or effects of other LDAP operations) have been replicated to the master. Due to replication lag, the data have not been replicated and as a consequence, a request fails.</p>
<p>In the past couple of years several replication races were discovered and fixed (or mitigated) in Dogtag or FreeIPA:</p>
<h4 id="updatenumberrange-failure-due-to-missing-session-object"><code>updateNumberRange</code> failure due to missing session object</h4>
<p><strong>Ticket</strong>: <a href="https://pagure.io/dogtagpki/issue/2557">https://pagure.io/dogtagpki/issue/2557</a></p>
<p><strong>Description</strong>: After security domain login (locally on the <em>replica</em>) the session object gets replicated to the <em>master</em>. The cookie/token conveyed in the <code>updateNumberRange</code> range referred to a session that the <em>master</em> did not yet know about.</p>
<p><strong>Resolution</strong>: the <em>replica</em> sleeps (duration configuration; default 5s) after security domain login, giving time for replication. This is not guaranteed the avoid the problem: the complete solution (yet to be implemented) will be to <a href="https://pagure.io/dogtagpki/issue/2831">use a signed/MACed token</a>.</p>
<h4 id="security-domain-login-failure-due-to-missing-user-or-group-membership">Security domain login failure due to missing user or group membership</h4>
<p><strong>Ticket</strong>: <a href="https://pagure.io/freeipa/issue/7593">https://pagure.io/freeipa/issue/7593</a></p>
<p><strong>Description</strong>: This bug was actually in FreeIPA, but manifested in <code>pki-tomcatd</code> on <em>master</em> as a failure to log into the security domain. This could occur for one of two reasons: either the user was unknown, or the user was not a member of a required group. FreeIPA performs the relevant LDAP operations on the <em>replica</em>, but they have not replicated to <em>master</em> yet. The <code>pkispawn</code>/<code>ipa-replica-install</code> error message looks something like:</p>
<pre><code>com.netscape.certsrv.base.PKIException: Failed to obtain
installation token from security domain:
com.netscape.certsrv.base.UnauthorizedException: User
admin-replica1.ipa.example is not a member of Enterprise CA
Administrators group.</code></pre>
<p><strong>Workaround</strong>: no supported workaround. (You could hack in a <code>sleep</code> though).</p>
<p><strong>Resolution</strong>: The user creation routine was already waiting for replication but the wait routine had a timeout bug causing false positives, <em>and</em> the group memberships were not being waited on. The timeout bug was fixed. The wait routine was enhanced to support waiting for particular attribute values; this feature was used to ensure group memberships have been replicated before continuing.</p>
<h3 id="other-updatenumberrange-failures">Other <code>updateNumberRange</code> failures</h3>
<p><strong>Ticket</strong>: <a href="https://pagure.io/dogtagpki/issue/3055">https://pagure.io/dogtagpki/issue/3055</a></p>
<p><strong>Description</strong>: When creating a clone from a master that was itself a clone, an <code>updateNumberRange</code> request fails at <em>master</em> with status 500. A <code>NullPointerException</code> backtrace appears in the journal for the <code>pki-tomcatd@pki-tomcat</code> unit (on <em>master</em>). The problem arises because the initial number range assignment for the second clone is equal to the range size of the first clone (range transfer size is a fixed number). This scenario was not handled correctly, leading to the exception.</p>
<p><strong>Workaround</strong>: Ensure that each clone services one of each kind of number (e.g. one full certificate request and issuance operation). This ensures that the clone’s range is smaller than the range transfer size, so that a subsequent <code>updateNumberRange</code> request will be satisfied from the master’s “standby” range.</p>
<p><strong>Resolution</strong>: detect range depletion due to <code>updateNumberRange</code> requests and eagerly switch to the standby range. A better fix (yet to be implemented) will be to <a href="https://pagure.io/dogtagpki/issue/3060">allocate each clone a full-sized range</a> from the unallocated numbers.</p>
<h2 id="discussion">Discussion</h2>
<p>Dogtag subsystem cloning is a complex procedure. Even more so in the FreeIPA context. There are lots of places failure can occur.</p>
<p>The case studies above are a few examples of difficult-to-debug failures where the cause was non-obvious. Often the error occurs on a different host (the <em>master</em>) from where the error was observed. And the important data about the true cause may reside in <code>ipareplica-install.log</code>, <code>pkispawn</code> log output, the Dogtag CA <code>debug</code> log (on <em>replica</em> or <em>master</em>) or the system journal (again on <em>replica</em> or <em>master</em>). Sometimes the 389DS logs can be helpful too.</p>
<p>Normally the fastest way to understand a problem is to gather all these sources of data and look at them all around the time the error occurred. When you see one failure, don’t assume that that is <em>the</em> failure. Cross-reference the log files. If you can’t see anything about an error, you probably need to look in a different file…</p>
<p>…or a different part of the file! It is important to note that <strong>Dogtag time stamps are in local time</strong>, whereas most other logs are UTC. Different machines in the topology can be in different timezones, so you could be dealing with up to three timezones across the log files. Check carefully what timezone the timestamps are in when you are “lining up” the logfiles. Many times I have seen (and often erred myself) an incorrect conclusion that “there is no error in the debug log” because of this trap.</p>
<p>In my experience, the most common causes of Dogtag cloning failure have involved Security Domain authentication issues and number range management. Over time I and others have fixed several bugs in these areas, but I am not confident that all potential problems have been fixed. The good news is that checking <em>all</em> the relevant logs usually leads to a good theory about the root cause.</p>
<p>What if you are not an engineer or not able to make sense of the Dogtag codebase? (This is fine by the way—Dogtag is a huge, gnarly beast!) The best thing you can do to help us analyse and resolve the issue is to collect <em>all</em> the logs (from the master and replica) and prune them to the relevant timeframe (minding the timezones) before passing them to an engineer for analysis.</p>
<p>In this post I only looked at Dogtag cloning failures. I have lots of other Dogtag “gut knowledge” that I plan to get out in upcoming posts.</p>]]></summary>
</entry>
<entry>
    <title>FreeIPA CA renewal master explained</title>
    <link href="https://frasertweedale.github.io/blog-redhat/posts/2018-11-20-ca-renewal-master.html" />
    <id>https://frasertweedale.github.io/blog-redhat/posts/2018-11-20-ca-renewal-master.html</id>
    <published>2018-11-20T00:00:00Z</published>
    <updated>2018-11-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="freeipa-ca-renewal-master-explained">FreeIPA CA renewal master explained</h1>
<p>Every FreeIPA deployment has a critical setting called the <em>CA renewal master</em>. In this post I explain how this setting is used, why it is important, and the consequences of improper configuration. I’ll also discuss scenarios which cause the value to change, and why and how you would change it manually.</p>
<h2 id="what-is-the-ca-renewal-master">What is the CA renewal master?</h2>
<p>The CA renewal master configuration controls which CA replica is responsible for renewing some important certificate used within a FreeIPA deployment. I will call these <em>system certificates</em>.</p>
<p>Unlike service certificates (e.g. for HTTP and LDAP) which have different keypairs and subject names on different servers, FreeIPA system certificates, and their keys, are shared by all CA replicas. These include the IPA CA certificate, OCSP certificate, Dogtag subsystem certificates, Dogtag audit signing certificate, IPA RA agent certificate and KRA transport and storage certificates.</p>
<p>The current CA renewal master configuration can be viewed via <code>ipa config-show</code>:</p>
<pre><code>[f28-1] ftweedal% ipa config-show | grep &#39;CA renewal master&#39;
  IPA CA renewal master: f28-1.ipa.local</code></pre>
<p>Under the hood, this configuration is a <em>server role attribute</em>. The CA renewal master is indicated by the presence of an <code>(ipaConfigString=caRenewalMaster)</code> attribute value on an IPA server’s CA role object. You can determine the renewal master via a plain LDAP search:</p>
<pre><code>[f28-1] ftweedal% ldapsearch -LLL \
      -D &quot;cn=Directory Manager&quot; \
      &quot;(ipaConfigString=carenewalmaster)&quot;
dn: cn=CA,cn=f28-1.ipa.local,cn=masters,cn=ipa,cn=etc,dc=ipa,dc=local
objectClass: nsContainer
objectClass: ipaConfigObject
objectClass: top
cn: CA
ipaConfigString: startOrder 50
ipaConfigString: caRenewalMaster
ipaConfigString: enabledService</code></pre>
<p>The configuration is automatically set to the first master in the topology on which the CA role was installed. Unless you installed without a CA, this is the original master set up via <code>ipa-server-install</code>.</p>
<h2 id="what-problem-is-solved-by-having-a-ca-renewal-master">What problem is solved by having a CA renewal master?</h2>
<p>All CA replicas have tracking requests for all system certificates. But if all CA replicas renewed system certificates independently, they would end up with different certificates. This is especially a problem for the CA certificate, and the subsystem and IPA RA certificates which get stored in LDAP for authentication purposes. The certificates must match exactly, otherwise there will be authentication failures between the FreeIPA framework and Dogtag, and between Dogtag and LDAP.</p>
<p>Appointing one CA replica as the renewal master allows the system certificates to be renewed exactly once, when required.</p>
<h3 id="how-do-other-replicas-acquire-the-updated-certificates">How do other replicas acquire the updated certificates?</h3>
<p>The Certmonger tracking requests on all CA replicas use the <code>dogtag-ipa-ca-renew-agent</code> renewal helper. This program reads the CA renewal master configuration. If the current host is the renewal master, it performs the renewal, and stores the certificate in LDAP under <code>cn=&lt;nickname&gt;,cn=ca_renewal,cn=ipa,cn=etc,{basedn}</code>. Additionally, if the certificate is the IPA RA or the Dogtag CA subsystem certificate, the new certificate gets added to the <code>userCertificate</code> attribute of the corresponding LDAP user entry</p>
<p>If the renewal master is a different host, the latest certificate is retrieved from the <code>ca_renewal</code> LDAP entry and returned to Certmonger. Due to non-determinism in exactly when Certmonger renewal attempts will occur, the non-renewal helper could attempt to “renew” the certificate before the renewal master has actually renewed the certificate. So it is <em>not an error</em> for the renewal helper to return the old (soon to expire) certificate. Certmonger will keep attempting to renew the certificate (with some delay between attempts) until it can retrieve the updated certificate (which will not expire soon).</p>
<h2 id="what-can-go-wrong">What can go wrong?</h2>
<p>If it wasn’t clear already, a (CA-ful) FreeIPA deployment must at all times have exactly one CA replica configured as the renewal master. That server must be online, operating normally, and replicating properly with other servers. Let’s look at what happens if these conditions are not met.</p>
<p>If the CA renewal master configuration refers to a server that has been decommissioned, or is offline, then no server will actually renew the certificates. All the non-renewal master servers will happily reinstall the current certificate, until they expire, and things will break. The troublesome thing about certificates is even one expired certificate can cause renewal failures for other certificates. The problems cascade and eventually the whole deployment is busted.</p>
<p>FreeIPA has a simple protection in place to ensure the renewal master configuration stays valid. Servers can be deleted from the topology via the <code>ipa server-del</code>, <code>ipa-replica-manage del</code>, <code>ipa-csreplica-manage del</code> or <code>ipa-server-install --uninstall</code> command. In these commands, if the server being deleted is the current CA renewal master, a different CA replica is elected as the new CA renewal master.</p>
<p>These protections only go so far. If the renewal master is still part of the topology but is offline for an extended duration it may miss a renewal window, causing expired certificates. If there are replication problems between the renewal master and other CA replicas, renewal might succeed, but the other CA replicas might not be able to retrieve the updated certificates before they expire. All of these problems (and more) have been seen in the wild.</p>
<p>I have seen cases where a CA renewal master was simply decommissioned without formally removing it from the FreeIPA topology. I have also seen cases where there was no CA renewal master configured (I do not know how this situation arose). Both of these scenarios have similar consequences to the “offline for extended duration” scenario.</p>
<p>What would happen if you had two (or more) CA replicas with <code>(ipaConfigString=caRenewalMaster)</code>? I haven’t seen this one in the wild, but I would not be surprised if one day I did see it. In this case, multiple CA replicas will perform renewals. Will clobber each others’ certificates, and will result in some replicas having RA Agent or Dogtag subsystem certificates out of sync with the corresponding user entries in LDAP. This is a less catastrophic consequence than the aforementioned scenarios, but still serious. It will result in Dogtag or IPA RA authentication failures on some (or most) CA replicas.</p>
<h2 id="why-and-how-to-change-the-ca-renewal-master">Why and how to change the CA renewal master</h2>
<p>Why would you need to change the renewal master configuration? Assuming the existing configuration is valid, the main reason you would need to change it is in anticipation of the decommissioning of the existing CA renewal master. You may wish to appoint a particular server as the new renewal master. As discussed above, the commands that remove servers from the topology will do this automatically, but <em>which server</em> will be chosen is out of your hands. So you can get one step ahead and change the renewal master yourself.</p>
<p>In my test setup there are two CA replicas:</p>
<pre><code>[f28-1] ftweedal% ipa server-role-find --role &#39;CA server&#39;
----------------------
2 server roles matched
----------------------
  Server name: f28-0.ipa.local
  Role name: CA server
  Role status: enabled

  Server name: f28-1.ipa.local
  Role name: CA server
  Role status: enabled
----------------------------
Number of entries returned 2
----------------------------</code></pre>
<p>The current renewal master is <code>f28-1.ipa.local</code>:</p>
<pre><code>[f28-1] ftweedal% ipa config-show | grep &#39;CA renewal master&#39;
  IPA CA renewal master: f28-1.ipa.local</code></pre>
<p>The preferred way to change the renewal master configuration is via the <code>ipa config-mod</code> command:</p>
<pre><code>[f28-1] ftweedal% ipa config-mod \
      --ca-renewal-master-server f28-0.ipa.local \
      | grep &#39;CA renewal master&#39;
  IPA CA renewal master: f28-0.ipa.local</code></pre>
<p>You can also use the <code>ipa-csreplica-manage</code> command. This requires the <code>Directory Manager</code> passphrase:</p>
<pre><code>[f28-1] ftweedal% ipa-csreplica-manage \
                    set-renewal-master f28-1.ipa.local
Directory Manager password: XXXXXXXX

f28-1.ipa.local is now the renewal master</code></pre>
<p>If for whatever reason the current renewal master configuration is invalid, you can use these same commands to reset it. As a last resort, you can modify the LDAP objects directly to ensure that exactly one CA role object has <code>(ipaConfigString=caRenewalMaster)</code>. Note that both the attribute name (<code>ipaConfigString</code>) and value (<code>caRenewalMaster</code>) are case-<em>insensitive</em>.</p>
<p>Finally, let’s observe what happens when we remove a server from the topology. I’ll remove <code>f28-1.ipa.local</code> (the current renewal master) using the <code>ipa-server-install --uninstall</code> command. After this operation, the CA renewal master configuration should point to <code>f28-0.ipa.local</code> (the only other CA replica in the topology).</p>
<pre><code>[f28-1:~] ftweedal% sudo ipa-server-install --uninstall

This is a NON REVERSIBLE operation and will delete all data
and configuration!
It is highly recommended to take a backup of existing data
and configuration using ipa-backup utility before proceeding.

Are you sure you want to continue with the uninstall procedure? [no]: yes
Forcing removal of f28-1.ipa.local
Failed to cleanup f28-1.ipa.local DNS entries: DNS is not configured
You may need to manually remove them from the tree
------------------------------------
Deleted IPA server &quot;f28-1.ipa.local&quot;
------------------------------------
Shutting down all IPA services
Unconfiguring CA
... (snip!)
Client uninstall complete.
The ipa-client-install command was successful
The ipa-server-install command was successful</code></pre>
<p>Jumping across to <code>f28-0.ipa.local</code>, I confirm that <code>f28-0.ipa.local</code> has become the renewal master:</p>
<pre><code>[f28-0] ftweedal% ipa config-show |grep &#39;CA renewal master&#39;
  IPA CA renewal master: f28-0.ipa.local</code></pre>
<h2 id="explicit-ca-certificate-renewal">Explicit CA certificate renewal</h2>
<p>There is one more scenario that can cause the CA renewal master to be changed. When the IPA CA certificate is explicitly renewed via the <code>ipa-cacert-manage renew</code> command the server on which the operation is performed becomes the CA renewal master. This is to cause the CA replica that <em>was</em> the renewal master to retrieve the new CA certificate from LDAP instead of renewing it.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this post I explained what the CA renewal master configuration is for and what it looks like under the hood. For FreeIPA/Dogtag system certificates, the CA renewal master configuration controls which CA replica actually performs renewal. The CA renewal master stores the renewed certificates in LDAP, and all other CA replicas look for them there. The <code>dogtag-ipa-ca-renew-agent</code> Certmonger renewal helper implements both of these behaviours, using the CA renewal master configuration to decide which behaviour to execute.</p>
<p>There must be exactly one CA renewal master in a topology and it must be operational. I discussed the consequences of various configuration or operational problems. I also explained why you might want to change the CA renewal master, and how to do it.</p>
<p>The CA renewal master is a critical configuration and incorrect renewal master configuration is often a factor in complex customer cases involving FreeIPA’s PKI. Commands that remove servers from the topology <em>should</em> elect a new CA renewal master when necessary. But misconfigurations do arise (if only we could know all the ways how!)</p>
<p>The upcoming FreeIPA <a href="https://www.freeipa.org/page/V4/Healthcheck">Healthcheck</a> feature will, among other checks, confirm that the CA renewal master configuration is sane. It will not (in the beginning at least) be able to diagnose availability or connectivity issues. But it should be able to catch some misconfigurations before they lead to catastrophic failure of the deployment.</p>]]></summary>
</entry>
<entry>
    <title>Should FreeIPA ship a subordinate CA profile?</title>
    <link href="https://frasertweedale.github.io/blog-redhat/posts/2018-10-19-ipa-sub-ca-profile.html" />
    <id>https://frasertweedale.github.io/blog-redhat/posts/2018-10-19-ipa-sub-ca-profile.html</id>
    <published>2018-10-19T00:00:00Z</published>
    <updated>2018-10-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="should-freeipa-ship-a-subordinate-ca-profile">Should FreeIPA ship a subordinate CA profile?</h1>
<p>In my <a href="2018-08-21-ipa-subordinate-ca.html">previous post</a> I discussed how to issue subordinate CA (sub-CA) certificates from FreeIPA. In brief, the administrator must create and import a profile configuration for issuing certificates with the needed characteristics. The profile must add a <em>Basic Constraints</em> extension asserting that the subject is a CA.</p>
<p>After publishing that post, it formed the basis of an official <a href="https://access.redhat.com/solutions/3572691">Red Hat solution</a> (Red Hat subscription required to view). Subsequently, an <a href="https://bugzilla.redhat.com/show_bug.cgi?id=1639441">RFE was filed</a> requesting a sub-CA profile to be included by default in FreeIPA. In this short post I’ll outline the reasons why this might not be a good idea, and what the profile might look like if we did ship one.</p>
<h2 id="the-case-against">The case against</h2>
<p>The most important reason not to include a sub-CA profile is that it will not be appropriate for many use cases. Important attributes of a sub-CA certificate include:</p>
<ul>
<li>validity period (how long will the certificate be valid for?)</li>
<li>key usage and extended key usage (what can the certificate be used for?)</li>
<li>path length constraint (how many further subordinate CAs may be issued below this CA?)</li>
<li>name constraints (what namespaces can this CA issue certificates for?)</li>
</ul>
<p>If we ship a default sub-CA profile in FreeIPA, all of these attributes will be determined ahead of time and fixed. There is a good chance the values will not be appropriate, and the administrator must create a custom profile configuration anyway. Worse, there is a risk that the profile will be used without due consideration of its appropriateness.</p>
<p>If we do nothing, we still have the blog post and official solution to guide administrators through the process. The administrator has the opportunity to alter the profile configuration according to their security or operational requirements.</p>
<h2 id="the-case-for">The case for</h2>
<p>The RFE description states:</p>
<blockquote>
<p>Signing a subordinate CA’s CSR in IdM is difficult and requires tinkering. This functionality should be built in and present with the product. Please bundle a subordinate CA profile like the one described in the [blog post].</p>
</blockquote>
<p>I agree that Dogtag profile configuration is difficult, even obtuse. It is not well documented and there is limited sanity checking. There is no <em>“one size fits all”</em> when it comes to sub-CA profiles, but can there be a <em>“one size fits most”</em>? Such a profile might have:</p>
<ul>
<li>path length constraint of zero (the CA can only issue leaf certificates)</li>
<li>name constraints limiting DNS names to the FreeIPA domain (and subdomains)</li>
<li>a validity period of two years</li>
</ul>
<p>In terms of security these are conservative attributes but they still admit the most common use case. Two years may or may not be a reasonable lifetime for the subordinate CA, but we have to choose <em>some</em> fixed value. The downside is that customers could use this profile without being aware of its limitations (path length, name constraints). The resulting issues will frustrate the customer and probably result in some support cases too.</p>
<h2 id="alternatives-and-conclusion">Alternatives and conclusion</h2>
<p>There is a middle road: instead of shipping the profile, we ship a “profile assistant” tool that asks some questions and builds the profile configuration. Questions would include the desired validity period, whether it’s for a CA (and if so the path length constraint), name constraints (if any), and so on. Then it imports the configuration.</p>
<p>There may be merit to this option, but none of the machinery exists. The effort and lead time are high. The other options: <em>do-nothing</em> (really <em>improve and maintain documentation</em>), or shipping a default sub-CA profile—are low effort and lead time.</p>
<p>In conclusion, I am open to either leaving sub-CA profiles as a documentation concern, or including a conservative default profile. But because there is no <em>one size fits all</em>, I prefer to leave sub-CA profile creation as a documented process that administrators can perform themselves—and tweak as they see fit.</p>]]></summary>
</entry>
<entry>
    <title>Issuing subordinate CA certificates from FreeIPA</title>
    <link href="https://frasertweedale.github.io/blog-redhat/posts/2018-08-21-ipa-subordinate-ca.html" />
    <id>https://frasertweedale.github.io/blog-redhat/posts/2018-08-21-ipa-subordinate-ca.html</id>
    <published>2018-08-21T00:00:00Z</published>
    <updated>2018-08-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="issuing-subordinate-ca-certificates-from-freeipa">Issuing subordinate CA certificates from FreeIPA</h1>
<p>FreeIPA, since version 4.4, has supported creating subordinate CAs within the deployment’s Dogtag CA instance. This feature is called <a href="2016-07-25-freeipa-subcas.html">lightweight sub-CAs</a>. But what about when you need to issue a subordinate CA certificate to an external entity? One use case would be chaining a FreeIPA deployment up to some existing FreeIPA deployment. This is similar to what many customers do with Active Directory. In this post I’ll show how you can issue subordinate CA certificates from FreeIPA.</p>
<h2 id="scenario-description">Scenario description</h2>
<p>The existing FreeIPA deployment has the realm <code>IPA.LOCAL</code> and domain <code>ipa.local</code>. Its CA’s <em>Subject Distinguished Name (Subject DN)</em> is <code>CN=Certificate Authority,O=IPA.LOCAL 201808022359</code>. The master’s hostname is <code>f28-0.ipa.local</code>. I will refer to this deployment as the <em>existing</em> or <em>primary deployment</em>.</p>
<p>I will install a new FreeIPA deployment on the host <code>f28-1.ipa.local</code>, with realm <code>SUB.IPA.LOCAL</code> and domain <code>sub.ipa.local</code>. This will be called the <em>secondary deployment</em>. Its CA will be signed by the CA of the primary deployment.</p>
<h2 id="choice-of-subject-principal-and-subject-dn">Choice of subject principal and Subject DN</h2>
<p>All certificate issuance via FreeIPA (with some limited exceptions) requires a nominated <em>subject principal</em>. Subject names in the CSR (Subject DN and <em>Subject Alternative Names</em>) are validated against the subject principal. We must create a subject principal in the primary deployment to represent the CA of the secondary deployment.</p>
<p>When validating CSRs, the <em>Common Name (CN)</em> of the Subject DN is checked against the subject principal, in the following ways:</p>
<ul>
<li>for <em>user</em> principals, the CN must match the UID</li>
<li>for <em>host</em> principals, the CN must match the hostname (case-insensitive)</li>
<li>for <em>service</em> principals, the CN must match the hostname (case-insensitive); only principal aliases with the same service type as the canonical principal are checked</li>
</ul>
<p>This validation regime imposes a restriction on what the CN of the subordinate CA can be. In particular:</p>
<ul>
<li>the Subject DN must contain a CN attribute</li>
<li>the CN value can be a hostname (host or service principal), or a UID (user principal)</li>
</ul>
<p>For this scenario, I chose to create a host principal for the domain of the secondary deployment:</p>
<pre><code>[f28-0]% ipa host-add --force sub.ipa.local
--------------------------
Added host &quot;sub.ipa.local&quot;
--------------------------
  Host name: sub.ipa.local
  Principal name: host/sub.ipa.local@IPA.LOCAL
  Principal alias: host/sub.ipa.local@IPA.LOCAL
  Password: False
  Keytab: False
  Managed by: sub.ipa.local</code></pre>
<h2 id="creating-a-certificate-profile-for-sub-cas">Creating a certificate profile for sub-CAs</h2>
<p>We will tweak the <code>caIPAserviceCert</code> profile configuration to create a new profile for subordinate CAs. Export the profile configuration:</p>
<pre><code>[f28-0]% ipa certprofile-show caIPAserviceCert --out SubCA.cfg
------------------------------------------------
Profile configuration stored in file &#39;SubCA.cfg&#39;
------------------------------------------------
  Profile ID: caIPAserviceCert
  Profile description: Standard profile for network services
  Store issued certificates: TRUE</code></pre>
<p>Perform the following edits to <code>SubCA.cfg</code>:</p>
<ol>
<li>Replace <code>profileId=caIPAserviceCert</code> with <code>profileId=SubCA</code>.</li>
<li><p>Replace the <code>subjectNameDefaultImpl</code> component with the <code>userSubjectNameDefaultImpl</code> component. This will use the Subject DN from the CSR <em>as is</em>, without restriction:</p>
<pre><code>policyset.serverCertSet.1.constraint.class_id=noConstraintImpl
policyset.serverCertSet.1.constraint.name=No Constraint
policyset.serverCertSet.1.default.class_id=userSubjectNameDefaultImpl
policyset.serverCertSet.1.default.name=Subject Name Default</code></pre></li>
<li>Edit the <code>keyUsageExtDefaultImpl</code> and <code>keyUsageExtConstraintImpl</code> configurations. They should have the following settings:
<ul>
<li><code>keyUsageCrlSign=true</code></li>
<li><code>keyUsageDataEncipherment=false</code></li>
<li><code>keyUsageDecipherOnly=false</code></li>
<li><code>keyUsageDigitalSignature=true</code></li>
<li><code>keyUsageEncipherOnly=false</code></li>
<li><code>keyUsageKeyAgreement=false</code></li>
<li><code>keyUsageKeyCertSign=true</code></li>
<li><code>keyUsageKeyEncipherment=false</code></li>
<li><code>keyUsageNonRepudiation=true</code></li>
</ul></li>
<li><p>Add the <em>Basic Constraints</em> extension configuration:</p>
<pre><code>policyset.serverCertSet.15.constraint.class_id=basicConstraintsExtConstraintImpl
policyset.serverCertSet.15.constraint.name=Basic Constraint Extension Constraint
policyset.serverCertSet.15.constraint.params.basicConstraintsCritical=true
policyset.serverCertSet.15.constraint.params.basicConstraintsIsCA=true
policyset.serverCertSet.15.constraint.params.basicConstraintsMinPathLen=0
policyset.serverCertSet.15.constraint.params.basicConstraintsMaxPathLen=0
policyset.serverCertSet.15.default.class_id=basicConstraintsExtDefaultImpl
policyset.serverCertSet.15.default.name=Basic Constraints Extension Default
policyset.serverCertSet.15.default.params.basicConstraintsCritical=true
policyset.serverCertSet.15.default.params.basicConstraintsIsCA=true
policyset.serverCertSet.15.default.params.basicConstraintsPathLen=0</code></pre>
<p>Add the new components’ index to the component list, to ensure they get processed:</p>
<pre><code>policyset.serverCertSet.list=1,2,3,4,5,6,7,8,9,10,11,12,15</code></pre></li>
<li><p>Remove the <code>commonNameToSANDefaultImpl</code> and <em>Extended Key Usage</em> related components. This can be accomplished by removing the relevant indices (in my case, <code>7</code> and <code>12</code>) from the component list:</p>
<pre><code>policyset.serverCertSet.list=1,2,3,4,5,6,8,9,10,11,15</code></pre></li>
<li>(<em>Optional</em>) edit the validity period in the <code>validityDefaultImpl</code> and <code>validityConstraintImpl</code> components. The default is 731 days. I did not change it.</li>
</ol>
<p>For the avoidance of doubt, the diff between the <code>caIPAserviceCert</code> profile configuration and <code>SubCA</code> is:</p>
<pre><code>--- caIPAserviceCert.cfg        2018-08-21 12:44:01.748884778 +1000
+++ SubCA.cfg   2018-08-21 14:05:53.484698688 +1000
@@ -13,5 +13,3 @@
-policyset.serverCertSet.1.constraint.class_id=subjectNameConstraintImpl
-policyset.serverCertSet.1.constraint.name=Subject Name Constraint
-policyset.serverCertSet.1.constraint.params.accept=true
-policyset.serverCertSet.1.constraint.params.pattern=CN=[^,]+,.+
-policyset.serverCertSet.1.default.class_id=subjectNameDefaultImpl
+policyset.serverCertSet.1.constraint.class_id=noConstraintImpl
+policyset.serverCertSet.1.constraint.name=No Constraint
+policyset.serverCertSet.1.default.class_id=userSubjectNameDefaultImpl
@@ -19 +16,0 @@
-policyset.serverCertSet.1.default.params.name=CN=$request.req_subject_name.cn$, o=IPA.LOCAL 201808022359
@@ -66,2 +63,2 @@
-policyset.serverCertSet.6.constraint.params.keyUsageCrlSign=false
-policyset.serverCertSet.6.constraint.params.keyUsageDataEncipherment=true
+policyset.serverCertSet.6.constraint.params.keyUsageCrlSign=true
+policyset.serverCertSet.6.constraint.params.keyUsageDataEncipherment=false
@@ -72,2 +69,2 @@
-policyset.serverCertSet.6.constraint.params.keyUsageKeyCertSign=false
-policyset.serverCertSet.6.constraint.params.keyUsageKeyEncipherment=true
+policyset.serverCertSet.6.constraint.params.keyUsageKeyCertSign=true
+policyset.serverCertSet.6.constraint.params.keyUsageKeyEncipherment=false
@@ -78,2 +75,2 @@
-policyset.serverCertSet.6.default.params.keyUsageCrlSign=false
-policyset.serverCertSet.6.default.params.keyUsageDataEncipherment=true
+policyset.serverCertSet.6.default.params.keyUsageCrlSign=true
+policyset.serverCertSet.6.default.params.keyUsageDataEncipherment=false
@@ -84,2 +81,2 @@
-policyset.serverCertSet.6.default.params.keyUsageKeyCertSign=false
-policyset.serverCertSet.6.default.params.keyUsageKeyEncipherment=true
+policyset.serverCertSet.6.default.params.keyUsageKeyCertSign=true
+policyset.serverCertSet.6.default.params.keyUsageKeyEncipherment=false
@@ -111,2 +108,13 @@
-policyset.serverCertSet.list=1,2,3,4,5,6,7,8,9,10,11,12
-profileId=caIPAserviceCert
+policyset.serverCertSet.15.constraint.class_id=basicConstraintsExtConstraintImpl
+policyset.serverCertSet.15.constraint.name=Basic Constraint Extension Constraint
+policyset.serverCertSet.15.constraint.params.basicConstraintsCritical=true
+policyset.serverCertSet.15.constraint.params.basicConstraintsIsCA=true
+policyset.serverCertSet.15.constraint.params.basicConstraintsMinPathLen=0
+policyset.serverCertSet.15.constraint.params.basicConstraintsMaxPathLen=0
+policyset.serverCertSet.15.default.class_id=basicConstraintsExtDefaultImpl
+policyset.serverCertSet.15.default.name=Basic Constraints Extension Default
+policyset.serverCertSet.15.default.params.basicConstraintsCritical=true
+policyset.serverCertSet.15.default.params.basicConstraintsIsCA=true
+policyset.serverCertSet.15.default.params.basicConstraintsPathLen=0
+policyset.serverCertSet.list=1,2,3,4,5,6,8,9,10,11,15
+profileId=SubCA</code></pre>
<p>Now import the profile:</p>
<pre><code>[f28-0]% ipa certprofile-import SubCA \
            --desc &quot;Subordinate CA&quot; \
            --file SubCA.cfg \
            --store=1
------------------------
Imported profile &quot;SubCA&quot;
------------------------
  Profile ID: SubCA
  Profile description: Subordinate CA
  Store issued certificates: TRUE</code></pre>
<h2 id="creating-the-ca-acl">Creating the CA ACL</h2>
<p>Before issuing a certificate, <em>CA ACLs</em> are checked to determine if the combination of CA, profile and subject principal is acceptable. We must create a CA ACL that permits use of the <code>SubCA</code> profile to issue certificate to our subject principal:</p>
<pre><code>[f28-0]% ipa caacl-add SubCA
--------------------
Added CA ACL &quot;SubCA&quot;
--------------------
  ACL name: SubCA
  Enabled: TRUE

[f28-0]% ipa caacl-add-profile SubCA --certprofile SubCA
  ACL name: SubCA
  Enabled: TRUE
  Profiles: SubCA
-------------------------
Number of members added 1
-------------------------

[f28-0]% ipa caacl-add-ca SubCA --ca ipa
  ACL name: SubCA
  Enabled: TRUE
  CAs: ipa
  Profiles: SubCA
-------------------------
Number of members added 1
-------------------------

[f28-0]% ipa caacl-add-host SubCA --hosts sub.ipa.local
  ACL name: SubCA
  Enabled: TRUE
  CAs: ipa
  Profiles: SubCA
  Hosts: sub.ipa.local
-------------------------
Number of members added 1
-------------------------</code></pre>
<h2 id="installing-the-secondary-freeipa-deployment">Installing the secondary FreeIPA deployment</h2>
<p>We are finally ready to run <code>ipa-server-install</code> to set up the secondary deployment. We need to use the <code>--ca-subject</code> option to override the default Subject DN that will be included in the CSR, providing a valid DN according to the rules discussed above.</p>
<pre><code>[root@f28-1]# ipa-server-install \
    --realm SUB.IPA.LOCAL \
    --domain sub.ipa.local \
    --external-ca \
    --ca-subject &#39;CN=SUB.IPA.LOCAL,O=Red Hat&#39;

...

The IPA Master Server will be configured with:
Hostname:       f28-1.ipa.local
IP address(es): 192.168.124.142
Domain name:    sub.ipa.local
Realm name:     SUB.IPA.LOCAL

The CA will be configured with:
Subject DN:   CN=SUB.IPA.LOCAL,O=Red Hat
Subject base: O=SUB.IPA.LOCAL
Chaining:     externally signed (two-step installation)

Continue to configure the system with these values? [no]: yes

...

Configuring certificate server (pki-tomcatd). Estimated time: 3 minutes
  [1/8]: configuring certificate server instance

The next step is to get /root/ipa.csr signed by your CA and re-run
/usr/sbin/ipa-server-install as:
/usr/sbin/ipa-server-install
  --external-cert-file=/path/to/signed_certificate
  --external-cert-file=/path/to/external_ca_certificate
The ipa-server-install command was successful</code></pre>
<p>Let’s inspect <code>/root/ipa.csr</code>:</p>
<pre><code>[root@f28-1]# openssl req -text &lt; /root/ipa.csr |grep Subject:
        Subject: O = Red Hat, CN = SUB.IPA.LOCAL</code></pre>
<p>The desired Subject DN appears in the CSR (note that <code>openssl</code> shows DN components in the opposite order from FreeIPA). After copying the CSR to <code>f28-0.ipa.local</code> we can request the certificate:</p>
<pre><code>[f28-0]% ipa cert-request ~/ipa.csr \
            --principal host/sub.ipa.local \
            --profile SubCA \
            --certificate-out ipa.pem
  Issuing CA: ipa
  Certificate: MIIEAzCCAuugAwIBAgIBFTANBgkqhkiG9w0BAQsF...
  Subject: CN=SUB.IPA.LOCAL,O=Red Hat
  Issuer: CN=Certificate Authority,O=IPA.LOCAL 201808022359
  Not Before: Tue Aug 21 04:16:24 2018 UTC
  Not After: Fri Aug 21 04:16:24 2020 UTC
  Serial number: 21
  Serial number (hex): 0x15</code></pre>
<p>The certificate was saved in the file <code>ipa.pem</code>. We can see from the command output that the Subject DN in the certificate is exactly what was in the CSR. Further inspecting the certificate, observe that the Basic Constraints extension is present and the Key Usage extension contains the appropriate assertions:</p>
<pre><code>[f28-0]% openssl x509 -text &lt; ipa.pem
...
      X509v3 extensions:
          ...
          X509v3 Key Usage: critical
              Digital Signature, Non Repudiation, Certificate Sign, CRL Sign
          ...
          X509v3 Basic Constraints: critical
              CA:TRUE, pathlen:0
          ...</code></pre>
<p>Now, after copying the just-issued subordinate CA certificate and the primary CA certificate (<code>/etc/ipa/ca.crt</code>) over to <code>f28-1.ipa.local</code>, we can continue the installation:</p>
<pre><code>[root@f28-1]# ipa-server-install \
                --external-cert-file ca.crt \
                --external-cert-file ipa.pem

The log file for this installation can be found in /var/log/ipaserver-install.log
Directory Manager password: XXXXXXXX

...

Adding [192.168.124.142 f28-1.ipa.local] to your /etc/hosts file
Configuring ipa-custodia
  [1/5]: Making sure custodia container exists
...
The ipa-server-install command was successful</code></pre>
<p>And we’re done.</p>
<h2 id="discussion">Discussion</h2>
<p>I’ve shown how to create a profile for issuing subordinate CA certificates in FreeIPA. Because of the way FreeIPA validates certificate requests—always against a subject principal—there are restrictions on the what the subject DN of the subordinate CA can be. The Subject DN must contain a CN attribute matching either the hostname of a host or service principal, or the UID of a user principal.</p>
<p>If you want to avoid these Subject DN restrictions, right now there is no choice but to use the Dogtag CA directly, instead of via the FreeIPA commands. If such a requirement emerges it might make sense to implement some “special handling” for issuing sub-CA certificates (similar to what we currently do for the KDC certificate). But the certificate request logic is already complicated; I am hesitant to complicate it even more.</p>
<p>Currently there is no sub-CA profile included in FreeIPA by default. It might make sense to include it, or at least to produce an official solution document describing the procedure outlined in this post.</p>]]></summary>
</entry>
<entry>
    <title>Replacing a lost or broken CA in FreeIPA</title>
    <link href="https://frasertweedale.github.io/blog-redhat/posts/2018-05-31-replacing-lost-ca.html" />
    <id>https://frasertweedale.github.io/blog-redhat/posts/2018-05-31-replacing-lost-ca.html</id>
    <published>2018-05-31T00:00:00Z</published>
    <updated>2018-05-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="replacing-a-lost-or-broken-ca-in-freeipa">Replacing a lost or broken CA in FreeIPA</h1>
<p><em>This is a</em> <strong>long post</strong>. <em>If you just want some steps to follow feel free to</em> <a href="#recovery-procedure-summarised">skip ahead</a>.</p>
<p>Every now and then we have a customer case or a question on the <code>freeipa-users</code> mailing list about replacing a lost CA. Usually the scenario goes something like this:</p>
<ul>
<li>FreeIPA was installed (with a CA)</li>
<li>Replicas were created, but without the CA role</li>
<li>The original CA master was decommissioned or failed</li>
</ul>
<p>A variation on this is the removal of the Dogtag instance on the only CA master in a deployment. This is less common, because it’s a deliberate act rather than an oversight. This action might be performed to clean up a partially-completed but failed execution of <code>ipa-ca-install</code>, leaving the deployment in an inconsistent state.</p>
<p>In either case, the deployment is left without a CA. There might be a backup of the original CA keys can can be used to restore a CA, or there might not.</p>
<p>In this post I will focus on the total loss of a CA. What is required to bring up a new CA in an existing IPA deployment, after the original CA is destroyed? I’m going to break a test installation as described above, then work out how to fix it. The goal is to produce a recovery procedure for administrators in this situation.</p>
<h2 id="prevention-is-better-than-cure">Prevention is better than cure</h2>
<p>Before I go ahead and delete the CA from a deployment, let’s talk about prevention. Losing your CA is a Big Deal. Therefore it’s essential not to leave your deployment with only one CA master. In earlier times, FreeIPA did not do anything to detect that there was only one CA master and make a fuss about it. This was poor UX that left many users and customers in a precarious situation, and ultimately to higher support costs for Red Hat.</p>
<p>Today we have some safeguards in place. In the topology Web UI we detect a single-CA topology and warn about it. <code>ipa-replica-install</code> alerts the administrator if there is only one CA in the topology and suggests to install the CA role on the new replica. <code>ipa-server-install --uninstall</code> warns when you are uninstalling the last instance of a some server role; this check includes the CA role. Eventually, FreeIPA will have some health check tools that will check for many kinds of problems, including this one.</p>
<h2 id="assumptions-and-starting-environment">Assumptions and starting environment</h2>
<p>I’ve made some assumptions that reduce the number of steps or remove potential pitfalls:</p>
<ul>
<li>The Subject DN of the replacement CA will be different from the original CA. The key will be different, so this will avoid problems with programs that can’t handle a <em>same subject, different key</em> scenario. It also avoids the need to force the new CA to start issuing certificates from some serial number higher than any that were previously issued.</li>
<li>We’ll use self-signed CAs. I can’t think of any problems that would arise doing this with an externally-signed CA. But there will be fewer steps and it will keep the post focused. The recovery procedure will not be substantially different for externally-signed CAs.</li>
</ul>
<p>For the environment, I’m using builds of the FreeIPA <code>master</code> branch, somewhere around the <code>v4.7</code> pre-release. Master and replica machines are both running Fedora 28.</p>
<p>There are two servers in the topology. <code>f28-1.ipa.local</code> was the original server and is the only server with the CA role. The replica <code>f28-0.ipa.local</code> was created from <code>f28-1</code>, without a CA. The CA subject DN is <code>CN=Certificate Authority,O=IPA.LOCAL 201805171453</code>. The Kerberos realm name is <code>IPA.LOCAL</code>.</p>
<h2 id="success-criteria">Success criteria</h2>
<p>How do we know when the deployment is repaired? I will use the following success criteria:</p>
<ol>
<li>The CA role is installed on a server (in our case, <code>f28-0</code>). That server is configured as the CA renewal master.</li>
<li>The new CA certificate is present in the LDAP trust store.</li>
<li>The old certificate remains in the LDAP trust store, so that certificates issued by the old CA are still trusted.</li>
<li>Certificates can be issued via <code>ipa cert-request</code>.</li>
<li>Existing HTTP and LDAP certificates, issued by the old CA, can be successfully renewed by Certmonger using the new CA.</li>
<li>A CA replica can be created.</li>
</ol>
<h2 id="deleting-the-ca">Deleting the CA</h2>
<p>Now I will remove <code>f28-1</code> from the topology. Recent versions of FreeIPA are aware of which roles (e.g. CA, DNS, etc) are installed on which servers. In this case, the program correctly detects that this server contains the only CA instance, and aborts:</p>
<pre><code># ipa-server-install --uninstall

This is a NON REVERSIBLE operation and will delete all data and configuration!
It is highly recommended to take a backup of existing data and configuration
  using ipa-backup utility before proceeding.

Are you sure you want to continue with the uninstall procedure? [no]: y
ipapython.admintool: ERROR    Server removal aborted:
  Deleting this server is not allowed as it would leave your
  installation without a CA.
ipapython.admintool: ERROR    The ipa-server-install command failed.
  See /var/log/ipaserver-uninstall.log for more information</code></pre>
<p>The <code>--ignore-last-of-role</code> option suppresses this check. When we add that option, the deletion of the server succeeds:</p>
<pre><code># ipa-server-install --uninstall --ignore-last-of-role

This is a NON REVERSIBLE operation and will delete all data and configuration!
It is highly recommended to take a backup of existing data and configuration
  using ipa-backup utility before proceeding.

Are you sure you want to continue with the uninstall procedure? [no]: y
------------------------------------
Deleted IPA server &quot;f28-1.ipa.local&quot;
------------------------------------
Shutting down all IPA services
Configuring certmonger to stop tracking system certificates for KRA
Configuring certmonger to stop tracking system certificates for CA
Unconfiguring CA
Unconfiguring web server
Unconfiguring krb5kdc
Unconfiguring kadmin
Unconfiguring directory server
Unconfiguring ipa-custodia
Unconfiguring ipa-otpd
Removing IPA client configuration
Removing Kerberos service principals from /etc/krb5.keytab
Disabling client Kerberos and LDAP configurations
Redundant SSSD configuration file /etc/sssd/sssd.conf was moved to /etc/sssd/sssd.conf.deleted
Restoring client configuration files
Unconfiguring the NIS domain.
nscd daemon is not installed, skip configuration
nslcd daemon is not installed, skip configuration
Systemwide CA database updated.
Client uninstall complete.
The ipa-client-install command was successful</code></pre>
<p>Switching back to <code>f28-0</code> (the CA-less replica), we can see that the <code>f28-1</code> is gone for good, and there is no server with the <code>CA server</code> role installed:</p>
<pre><code>% ipa server-find
--------------------
1 IPA server matched
--------------------
  Server name: f28-0.ipa.local
  Min domain level: 0
  Max domain level: 1
----------------------------
Number of entries returned 1
----------------------------

% ipa server-role-find --role &quot;CA server&quot;
---------------------
1 server role matched
---------------------
  Server name: f28-0.ipa.local
  Role name: CA server
  Role status: absent
----------------------------
Number of entries returned 1
----------------------------</code></pre>
<p>And because of this, we cannot issue certificates:</p>
<pre><code>% ipa cert-request --principal alice alice.csr
ipa: ERROR: CA is not configured</code></pre>
<p>OK, time to fix the deployment!</p>
<h2 id="fixing-the-deployment">Fixing the deployment</h2>
<p>The first thing we’ll try is just running <code>ipa-ca-install</code>. This command installs the CA role on an existing server. I expect it to fail, but it might hint at some of the repairs that need to be performed.</p>
<pre><code># ipa-ca-install --subject-base &quot;O=IPA.LOCAL NEW CA&quot;
Directory Manager (existing master) password: XXXXXXXX

Your system may be partly configured.
Run /usr/sbin/ipa-server-install --uninstall to clean up.

Certificate with nickname IPA.LOCAL IPA CA is present in
/etc/dirsrv/slapd-IPA-LOCAL/, cannot continue.</code></pre>
<p>We will not follow the advice about uninstalling the server. But the second message tell us something useful: we need to rename the CA certificate in <code>/etc/dirsrv/slapd-IPA-LOCAL</code>.</p>
<p>In fact, there are lots of places we need to rename the old CA certificate, including the LDAP certificate store. I’ll actually start there.</p>
<h3 id="ldap-certificate-store">LDAP certificate store</h3>
<p>FreeIPA has an LDAP-based store of trusted CA certificates used by clients and servers. The <code>ipa-certupdate</code> command reads certificates from this trust store and adds them to system trust stores and server certificate databases.</p>
<p>CA certificates are stored under <code>cn=certificates,cn=ipa,cn=etc,{basedn}</code>. The <code>cn</code> of each certificate entry is based on the Subject DN. The FreeIPA CA is the one exception: its <code>cn</code> is always <code>{REALM} IPA CA</code>. What are the current contents of the LDAP trust store?</p>
<pre><code>% ldapsearch -LLL -D &quot;cn=Directory Manager&quot; -wXXXXXXXX \
    -b &quot;cn=certificates,cn=ipa,cn=etc,dc=ipa,dc=local&quot; \
    -s one ipaCertIssuerSerial cn
dn: cn=IPA.LOCAL IPA CA,cn=certificates,cn=ipa,cn=etc,dc=ipa,dc=local
ipaCertIssuerSerial: CN=Certificate Authority,O=IPA.LOCAL 201805171453;1
cn: IPA.LOCAL IPA CA</code></pre>
<p>We see only the FreeIPA CA certificate, as expected. We must move this entry aside. We do still want to keep it in the trust stores so certificates that were issued by this CA will still be trusted. I used the <code>ldapmodrdn</code> command to rename this entry, with the new <code>cn</code> based on the Subject DN of the old CA.</p>
<pre><code>% ldapmodrdn -D &quot;cn=Directory Manager&quot; -wXXXXXXXX -r \
    &quot;cn=IPA.LOCAL IPA CA,cn=certificates,cn=ipa,cn=etc,dc=ipa,dc=local&quot; \
    &quot;cn=CN\=Certificate Authority\,O\=IPA.LOCAL 201805171453&quot;

% ldapsearch -LLL -D &quot;cn=Directory Manager&quot; -wXXXXXXXX \
    -b &quot;cn=certificates,cn=ipa,cn=etc,dc=ipa,dc=local&quot; \
    -s one ipaCertIssuerSerial cn
dn: cn=CN\3DCertificate Authority\2CO\3DIPA.LOCAL 201805171453,cn=certificates,cn=
 ipa,cn=etc,dc=ipa,dc=local
ipaCertIssuerSerial: CN=Certificate Authority,O=IPA.LOCAL 201805171453;1
cn: CN=Certificate Authority,O=IPA.LOCAL 201805171453</code></pre>
<p>For the <code>ldapmodrdn</code> command, note the escaping of the <code>=</code> and <code>,</code> characters in the DN. This is important.</p>
<h3 id="removing-ca-entries">Removing CA entries</h3>
<p>There are a bunch of CA entries in the FreeIPA directory. The <code>cn=ipa</code> is the main IPA CA. In additional, there can be zero or more <em>lightweight sub-CAs</em> in a FreeIPA deployment.</p>
<pre><code># ipa ca-find
-------------
2 CAs matched
-------------
  Name: ipa
  Description: IPA CA
  Authority ID: a0e7a855-aac2-40fc-8e86-cf1a7429f28c
  Subject DN: CN=Certificate Authority,O=IPA.LOCAL 201805171453
  Issuer DN: CN=Certificate Authority,O=IPA.LOCAL 201805171453

  Name: test1
  Authority ID: ac7e6def-acd8-4d19-ab3e-60067c17ba81
  Subject DN: CN=test1
  Issuer DN: CN=Certificate Authority,O=IPA.LOCAL 201805171453
----------------------------
Number of entries returned 2
----------------------------</code></pre>
<p>These entries will all need to be removed:</p>
<pre><code># ipa ca-find --pkey-only --all \
    | grep dn: \
    | awk &#39;{print $2}&#39; \
    | xargs ldapdelete -D &quot;cn=Directory Manager&quot; -wXXXXXXXX

# ipa ca-find
-------------
0 CAs matched
-------------
----------------------------
Number of entries returned 0
----------------------------</code></pre>
<h3 id="ds-nssdb">DS NSSDB</h3>
<p><code>ipa-ca-install</code> complained about the presense of a certificate with nickname <code>IPA.LOCAL IPA CA</code> in the <code>/etc/dirsrv/slapd-IPA-LOCAL</code> NSS certificate database (NSSDB). What are the current contents of this NSSDB?</p>
<pre><code># certutil -d /etc/dirsrv/slapd-IPA-LOCAL -L

Certificate Nickname                 Trust Attributes
                                     SSL,S/MIME,JAR/XPI

IPA.LOCAL IPA CA                     CT,C,C
Server-Cert                          u,u,u</code></pre>
<p>There are two certificates: the old CA certificate and the server certificate.</p>
<p>With the CA certificate having been renamed in the LDAP trust store, I’ll now run <code>ipa-certupdate</code> and see what happens in the NSSDB.</p>
<pre><code># ipa-certupdate
trying https://f28-0.ipa.local/ipa/session/json
[try 1]: Forwarding &#39;ca_is_enabled/1&#39; to json server
&#39;https://f28-0.ipa.local/ipa/session/json&#39;
Systemwide CA database updated.
Systemwide CA database updated.
The ipa-certupdate command was successful</code></pre>
<p>Nothing failed! That is encouraging. But <code>certutil</code> still shows the same output as above. So we must find another way to change the nickname in the NSSDB. Lucky for us, <code>certutil</code> has a <code>rename</code> option:</p>
<pre><code># certutil --rename --help
--rename        Change the database nickname of a certificate
   -n cert-name      The old nickname of the cert to rename
   --new-n new-name  The new nickname of the cert to rename
   -d certdir        Cert database directory (default is ~/.netscape)
   -P dbprefix       Cert &amp; Key database prefix

# certutil -d /etc/dirsrv/slapd-IPA-LOCAL --rename \
    -n &#39;IPA.LOCAL IPA CA&#39; --new-n &#39;OLD IPA CA&#39;

# certutil -d /etc/dirsrv/slapd-IPA-LOCAL -L

Certificate Nickname                 Trust Attributes
                                     SSL,S/MIME,JAR/XPI

OLD IPA CA                           CT,C,C
Server-Cert                          u,u,u</code></pre>
<p>I also performed this rename in <code>/etc/ipa/nssdb</code>. On Fedora 28, Apache uses OpenSSL instead of NSS. But on older versions there is also an Apache NSSDB at <code>/etc/httpd/alias</code>; the rename will need to be performed there, too.</p>
<h3 id="ipa-ca-install-attempt-2"><code>ipa-ca-install</code>, attempt 2</h3>
<p>Now that the certificates have been renamed in the LDAP trust store and NSSDBs, let’s try <code>ipa-ca-install</code> again:</p>
<pre><code># ipa-ca-install --ca-subject &#39;CN=IPA.LOCAL NEW CA&#39;
Directory Manager (existing master) password: XXXXXXXX

The CA will be configured with:
Subject DN:   CN=IPA.LOCAL NEW CA
Subject base: O=IPA.LOCAL
Chaining:     self-signed

Continue to configure the CA with these values? [no]: y
Configuring certificate server (pki-tomcatd). Estimated time: 3 minutes
  [1/28]: configuring certificate server instance
  [2/28]: exporting Dogtag certificate store pin
  [3/28]: stopping certificate server instance to update CS.cfg
  [4/28]: backing up CS.cfg
  [5/28]: disabling nonces
  [6/28]: set up CRL publishing
  [7/28]: enable PKIX certificate path discovery and validation
  [8/28]: starting certificate server instance
  [9/28]: configure certmonger for renewals
  [10/28]: requesting RA certificate from CA
  [error] DBusException: org.fedorahosted.certmonger.duplicate:
          Certificate at same location is already used by request
          with nickname &quot;20180530050017&quot;.</code></pre>
<p>Well, we have made progress. Installation got a fair way along, but failed because there was already a Certmonger tracking request for the IPA RA certificate.</p>
<h3 id="certmonger-tracking-requests">Certmonger tracking requests</h3>
<p>We have to clean up the Certmonger tracking request for the <code>IPA RA</code> certificate. The <code>ipa-ca-install</code> failure helpfully told us the ID of the problematic request. But if we wanted to nail it on the first try we’d have to look it up. We can ask Certmonger to show the tracking request for the certificate file at <code>/var/lib/ipa/ra-agent.pem</code>, where the <code>IPA RA</code> certificate is stored:</p>
<pre><code># getcert list -f /var/lib/ipa/ra-agent.pem
Number of certificates and requests being tracked: 4.
Request ID &#39;20180530050017&#39;:
        status: MONITORING
        stuck: no
        key pair storage: type=FILE,location=&#39;/var/lib/ipa/ra-agent.key&#39;
        certificate: type=FILE,location=&#39;/var/lib/ipa/ra-agent.pem&#39;
        CA: dogtag-ipa-ca-renew-agent
        issuer: CN=Certificate Authority,O=IPA.LOCAL 201805171453
        subject: CN=IPA RA,O=IPA.LOCAL 201805171453
        expires: 2020-05-06 14:55:30 AEST
        key usage: digitalSignature,keyEncipherment,dataEncipherment
        eku: id-kp-serverAuth,id-kp-clientAuth
        pre-save command: /usr/libexec/ipa/certmonger/renew_ra_cert_pre
        post-save command: /usr/libexec/ipa/certmonger/renew_ra_cert
        track: yes
        auto-renew: yes</code></pre>
<p>Then we can stop tracking it:</p>
<pre><code># getcert stop-tracking -i 20180530050017
Request &quot;20180530050017&quot; removed.</code></pre>
<p>Now, before we can run <code>ipa-ca-install</code> again, we have an unwanted <code>pki-tomcat</code> instance sitting around. We need to explicitly remove it using <code>pkidestroy</code>:</p>
<pre><code># pkidestroy -s CA -i pki-tomcat
Log file: /var/log/pki/pki-ca-destroy.20180530165156.log
Loading deployment configuration from /var/lib/pki/pki-tomcat/ca/registry/ca/deployment.cfg.
Uninstalling CA from /var/lib/pki/pki-tomcat.
pkidestroy  : WARNING  ....... this &#39;CA&#39; entry will NOT be deleted from security domain &#39;IPA&#39;!
pkidestroy  : WARNING  ....... security domain &#39;IPA&#39; may be offline or unreachable!
pkidestroy  : ERROR    ....... subprocess.CalledProcessError:  Command &#39;[&#39;/usr/bin/sslget&#39;, &#39;-n&#39;, &#39;subsystemCert cert-pki-ca&#39;, &#39;-p&#39;, &#39;7Zc^NEd1%~@rGO%d{)%K:$S5L[^1F1K.!@5oWgZ]e&#39;, &#39;-d&#39;, &#39;/etc/pki/pki-tomcat/alias&#39;, &#39;-e&#39;, &#39;name=&quot;/var/lib/pki/pki-tomcat&quot;&amp;type=CA&amp;list=caList&amp;host=f28-0.ipa.local&amp;sport=443&amp;ncsport=443&amp;adminsport=443&amp;agentsport=443&amp;operation=remove&#39;, &#39;-v&#39;, &#39;-r&#39;, &#39;/ca/agent/ca/updateDomainXML&#39;, &#39;f28-0.ipa.local:443&#39;]&#39; returned non-zero exit status 3.!
pkidestroy  : WARNING  ....... Directory &#39;/etc/pki/pki-tomcat/alias&#39; is either missing or is NOT a directory!

Uninstallation complete.</code></pre>
<h3 id="ipa-ca-install-attempt-3"><code>ipa-ca-install</code>, attempt 3</h3>
<p>Here we go again!</p>
<pre><code># ipa-ca-install --ca-subject &#39;CN=IPA.LOCAL NEW CA&#39;
...
  [10/28]: requesting RA certificate from CA
  [11/28]: setting audit signing renewal to 2 years
  [12/28]: restarting certificate server
  [13/28]: publishing the CA certificate
  [14/28]: adding RA agent as a trusted user
  [15/28]: authorizing RA to modify profiles
  [16/28]: authorizing RA to manage lightweight CAs
  [17/28]: Ensure lightweight CAs container exists
  [18/28]: configure certificate renewals
  [19/28]: configure Server-Cert certificate renewal
  [20/28]: Configure HTTP to proxy connections
  [21/28]: restarting certificate server
  [22/28]: updating IPA configuration
  [23/28]: enabling CA instance
  [24/28]: migrating certificate profiles to LDAP
  [error] RemoteRetrieveError: Failed to authenticate to CA REST API

Your system may be partly configured.
Run /usr/sbin/ipa-server-install --uninstall to clean up.

Unexpected error - see /var/log/ipareplica-ca-install.log for details:
RemoteRetrieveError: Failed to authenticate to CA REST API</code></pre>
<p>Dang! This time the installation failed due to an authentication failure between the IPA framework and Dogtag. This authentication uses the IPA RA certificate. It turns out that Certmonger did not request a new RA certificate. Instead, it tracked the preexisting RA certificate issued by the old CA:</p>
<pre><code># openssl x509 -text &lt; /var/lib/ipa/ra-agent.pem |grep Issuer
      Issuer: O = IPA.LOCAL 201805171453, CN = Certificate Authority</code></pre>
<p>The IPA framework presents the old RA certificate when authenticating to the new CA. The new CA does not recognise it, so authentication fails. Therefore we need to remove the IPA RA certificate and key before installing a new CA:</p>
<pre><code># rm -fv /var/lib/ipa/ra-agent.*
removed &#39;/var/lib/ipa/ra-agent.key&#39;
removed &#39;/var/lib/ipa/ra-agent.pem&#39;</code></pre>
<p>Because installation got a fair way along before failing, we also need to:</p>
<ul>
<li><code>pkidestroy</code> the Dogtag instance (as before)</li>
<li>remove Certmonger tracking requests for the RA certificate (as before)</li>
<li>remove Certmonger tracking requests for Dogtag system certificates</li>
<li>run <code>ipa-certupdate</code> to remove the new CA certificate from trust stores</li>
</ul>
<p>Also, the deployment now believes that the CA role has been installed on <code>f28-0</code>:</p>
<pre><code># ipa server-role-find --role &#39;CA server&#39;
---------------------
1 server role matched
---------------------
  Server name: f28-0.ipa.local
  Role name: CA server
  Role status: enabled
----------------------------
Number of entries returned 1
----------------------------</code></pre>
<p>Note <code>Role status: enabled</code> above. We need to remove this record that the CA role is installed on <code>f28-0</code>. Like so:</p>
<pre><code># ldapdelete -D &quot;cn=Directory Manager&quot; -wXXXXXXXX \
    cn=CA,cn=f28-0.ipa.local,cn=masters,cn=ipa,cn=etc,dc=ipa,dc=local

# ipa server-role-find --role &#39;CA server&#39;
---------------------
1 server role matched
---------------------
  Server name: f28-0.ipa.local
  Role name: CA server
  Role status: absent
----------------------------
Number of entries returned 1
----------------------------</code></pre>
<p>Having performed these cleanup tasks, we will try again to install the CA.</p>
<h3 id="ipa-ca-install-attempt-4"><code>ipa-ca-install</code>, attempt 4</h3>
<pre><code># ipa-ca-install --ca-subject &#39;CN=IPA.LOCAL NEW CA&#39;
...
  [24/28]: migrating certificate profiles to LDAP
  [25/28]: importing IPA certificate profiles
  [26/28]: adding default CA ACL
  [27/28]: adding &#39;ipa&#39; CA entry
  [28/28]: configuring certmonger renewal for lightweight CAs
Done configuring certificate server (pki-tomcatd).</code></pre>
<p>Hooray! We made it.</p>
<h2 id="results">Results</h2>
<p>Let’s revisit each of the success criteria and see whether the goal has been achieved.</p>
<h3 id="ca-role-installed-and-configured-as-renewal-master">1. CA role installed and configured as renewal master</h3>
<pre><code># ipa server-role-find --role &#39;CA server&#39;
---------------------
1 server role matched
---------------------
  Server name: f28-0.ipa.local
  Role name: CA server
  Role status: enabled
----------------------------
Number of entries returned 1
----------------------------

# ipa config-show |grep CA
  Certificate Subject base: O=IPA.LOCAL
  IPA CA servers: f28-0.ipa.local
  IPA CA renewal master: f28-0.ipa.local</code></pre>
<p>Looks like this criterion has been met.</p>
<h3 id="ldap-trust-store">2 &amp; 3. LDAP trust store</h3>
<pre><code># ldapsearch -LLL -D cn=&quot;Directory manager&quot; -wXXXXXXXX \
    -b &quot;cn=certificates,cn=ipa,cn=etc,dc=ipa,dc=local&quot; \
    -s one ipaCertIssuerSerial cn
dn: cn=CN\3DCertificate Authority\2CO\3DIPA.LOCAL 201805171453,cn=certificates
 ,cn=ipa,cn=etc,dc=ipa,dc=local
ipaCertIssuerSerial: CN=Certificate Authority,O=IPA.LOCAL 201805171453;1
cn: CN=Certificate Authority,O=IPA.LOCAL 201805171453

dn: cn=IPA.LOCAL IPA CA,cn=certificates,cn=ipa,cn=etc,dc=ipa,dc=local
ipaCertIssuerSerial: CN=IPA.LOCAL NEW CA;1
cn: IPA.LOCAL IPA CA</code></pre>
<p>The old and new CA certificates are present in the LDAP trust store. The new CA certificate has the appropriate <code>cn</code> value. These criteria have been met.</p>
<h3 id="ca-can-issue-certificates">4. CA can issue certificates</h3>
<pre><code># ipa cert-request --principal alice alice.csr
  Issuing CA: ipa
  Certificate: MIIC0zCCAbugAwIBAgIBCDAN...
  Subject: CN=alice,OU=pki-ipa,O=IPA
  Issuer: CN=IPA.LOCAL NEW CA
  Not Before: Thu May 31 05:14:42 2018 UTC
  Not After: Sun May 31 05:14:42 2020 UTC
  Serial number: 8
  Serial number (hex): 0x8</code></pre>
<p>The certificate was issued by the new CA. Success.</p>
<h3 id="can-renew-http-and-ldap-certificates">5. Can renew HTTP and LDAP certificates</h3>
<p>Because we are still trusting the old CA, there is no immediate need to renew the HTTP and LDAP certificate. But they will eventually expire, so we need to ensure that renewal works. <code>getcert resubmit</code> is used to initiate a renewal:</p>
<pre><code># getcert resubmit -i 20180530045952
Resubmitting &quot;20180530045952&quot; to &quot;IPA&quot;.

# sleep 10

# getcert list -i 20180530045952
Number of certificates and requests being tracked: 9.
Request ID &#39;20180530045952&#39;:
        status: MONITORING
        stuck: no
        key pair storage: type=FILE,location=&#39;/var/lib/ipa/private/httpd.key&#39;,pinfile=&#39;/var/lib/ipa/passwds/f28-0.ipa.local-443-RSA&#39;
        certificate: type=FILE,location=&#39;/var/lib/ipa/certs/httpd.crt&#39;
        CA: IPA
        issuer: CN=IPA.LOCAL NEW CA
        subject: CN=f28-0.ipa.local,OU=pki-ipa,O=IPA
        expires: 2020-05-31 15:24:05 AEST
        key usage: digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment
        eku: id-kp-serverAuth,id-kp-clientAuth
        pre-save command: 
        post-save command: /usr/libexec/ipa/certmonger/restart_httpd
        track: yes
        auto-renew: yes</code></pre>
<p>The renewal succeeded. Using <code>openssl s_client</code> we can see that the HTTP server is now presenting a certificate chain ending with the new CA certificate:</p>
<pre><code># echo | openssl s_client -showcerts \
    -connect f28-0.ipa.local:443 -servername f28-0.ipa.local \
    | grep s:
depth=1 CN = IPA.LOCAL NEW CA
verify return:1
depth=0 O = IPA, OU = pki-ipa, CN = f28-0.ipa.local
verify return:1
 0 s:/O=IPA/OU=pki-ipa/CN=f28-0.ipa.local
 1 s:/CN=IPA.LOCAL NEW CA</code></pre>
<p>So we are looking good against this criterion too.</p>
<h3 id="a-ca-replica-can-be-created">6. A CA replica can be created</h3>
<p><code>f28-1</code> was removed from the deployment at the beginning. To test CA replica installation, I enrolled it again using <code>ipa-client-install</code>, then executed <code>ipa-replica-install --setup-ca</code>. Installation completed successfully:</p>
<pre><code># ipa-replica-install --setup-ca
Password for admin@IPA.LOCAL:
Run connection check to master
Connection check OK
Configuring directory server (dirsrv). Estimated time: 30 seconds
  [1/41]: creating directory server instance
  ...
  [26/26]: configuring certmonger renewal for lightweight CAs
Done configuring certificate server (pki-tomcatd).
Configuring Kerberos KDC (krb5kdc)
  [1/1]: installing X509 Certificate for PKINIT
Full PKINIT configuration did not succeed
The setup will only install bits essential to the server functionality
You can enable PKINIT after the setup completed using &#39;ipa-pkinit-manage&#39;
Done configuring Kerberos KDC (krb5kdc).
Applying LDAP updates
Upgrading IPA:. Estimated time: 1 minute 30 seconds
  [1/9]: stopping directory server
  [2/9]: saving configuration
  [3/9]: disabling listeners
  [4/9]: enabling DS global lock
  [5/9]: starting directory server
  [6/9]: upgrading server
  [7/9]: stopping directory server
  [8/9]: restoring configuration
  [9/9]: starting directory server
Done.
Restarting the KDC</code></pre>
<p>We have a clean sweep of the success criteria. <strong>Mission accomplished.</strong></p>
<h2 id="recovery-procedure-summarised">Recovery procedure, summarised</h2>
<p>Distilling the trial-and-error exploration above down to the essential steps, we end up with the following procedure. Not every step is necessary in every case, and most steps do not necessarily have to be performed in the order shown here.</p>
<ol>
<li><p>Delete CA entries:</p>
<pre><code># ipa ca-find --pkey-only --all \
    | grep dn: \
    | awk &#39;{print $2}&#39; \
    | xargs ldapdelete -D &quot;cn=Directory Manager&quot; -wXXXXXXXX</code></pre></li>
<li><p>Destroy the existing Dogtag instance, if present:</p>
<pre><code># pkidestroy -s CA -i pki-tomcat</code></pre></li>
<li><p>Delete the CA server role entry for the current host, if present. For example:</p>
<pre><code># ldapdelete -D &quot;cn=Directory Manager&quot; -wXXXXXXXX
    cn=CA,cn=f28-0.ipa.local,cn=masters,cn=ipa,cn=etc,dc=ipa,dc=local</code></pre></li>
<li><p>Move aside the old IPA CA certificate in the LDAP certificate store. By convention, the new RDN should be based on the subject DN. For example:</p>
<pre><code>% ldapmodrdn -D &quot;cn=Directory Manager&quot; -wXXXXXXXX -r \
    &quot;cn=IPA.LOCAL IPA CA,cn=certificates,cn=ipa,cn=etc,dc=ipa,dc=local&quot; \
    &quot;cn=CN\=Certificate Authority\,O\=IPA.LOCAL 201805171453&quot;</code></pre></li>
<li><p>Rename the IPA CA certificate nickname in the NSSDBs at <code>/etc/dirsrv/slapd-{REALM}</code>, <code>/etc/ipa/nssdb</code> and, if relevant, <code>/etc/httpd/alias</code>. Example command:</p>
<pre><code># certutil -d /etc/dirsrv/slapd-IPA-LOCAL --rename \
    -n &#39;IPA.LOCAL IPA CA&#39; --new-n &#39;OLD IPA CA&#39;</code></pre></li>
<li><p>Remove Certmonger tracking requests for all Dogtag system certificates, and remove the tracking request for the IPA RA certificate:</p>
<pre><code># for ID in ... ; \
    do certmonger stop-tracking -i $ID ; \
    done</code></pre></li>
<li><p>Delete the IPA RA certificate and key:</p>
<pre><code># rm -fv /var/lib/ipa/ra-agent.*
removed &#39;/var/lib/ipa/ra-agent.key&#39;
removed &#39;/var/lib/ipa/ra-agent.pem&#39;</code></pre></li>
<li>Run <code>ipa-certupdate</code>.</li>
<li>Run <code>ipa-ca-install</code>.</li>
</ol>
<h2 id="conclusion">Conclusion</h2>
<p>The procedure developed in this post should cover most cases of CA installation failure or loss of the only CA master in a deployment. Inevitably the differences between versions of FreeIPA mean that the procedure may vary, depending on which version(s) you are using.</p>
<p>In this procedure, the new CA is installed with a different Subject DN. Conceptually, this is not essential. But reusing the same subject DN could cause problems for some programs. I <a href="2017-11-20-changing-ca-subject-dn-part-i.html">wrote about this in an earlier post</a>. Furthermore, to keep the CA subject DN the same would involve extra steps to ensure that serial numbers were not re-used. I am not interested in investigating how to pull this off. Just choose a new DN!</p>
<p>One feature request we sometimes receive is a CA uninstaller. The steps outlined in this post would suffice to uninstall a CA and erase knowledge of it from a deployment (apart from the CA certificate itself, which you would probably want to keep).</p>
<p>Looking ahead, I (or maybe someone else) could gather the cleanup steps into an easy to use script. Administrators or support personnel who have run into problems can execute the script to quickly restore their server to a state where the CA can (hopefully) successfully be installed.</p>]]></summary>
</entry>
<entry>
    <title>Certificate renewal and revocation in FreeIPA</title>
    <link href="https://frasertweedale.github.io/blog-redhat/posts/2018-05-11-renewal-and-revocation.html" />
    <id>https://frasertweedale.github.io/blog-redhat/posts/2018-05-11-renewal-and-revocation.html</id>
    <published>2018-05-11T00:00:00Z</published>
    <updated>2018-05-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="certificate-renewal-and-revocation-in-freeipa">Certificate renewal and revocation in FreeIPA</h1>
<p>A <a href="https://pagure.io/freeipa/issue/7482">recent FreeIPA ticket</a> has prompted a discussion about what revocation behaviour should occur upon certificate renewal. The ticket reported a regression: when renewing a certificate, <code>ipa cert-request</code> was no longer revoking the old certificate. But is revoking the certificate the correct behaviour in the first place?</p>
<p>This post discusses the motivations and benefits of automatically revoking a principal’s certificates when a new certificate is issued. It is assumed that subjects of certificates are FreeIPA principals. Conclusions do not necessarily apply to other environments or use cases.</p>
<h2 id="description-of-current-behaviour">Description of current behaviour</h2>
<p>Notwithstanding the purported regression mentioned above, the current behaviour of FreeIPA is:</p>
<ul>
<li>for host and service principals: when a new certificate is issued, revoke previous certificate(s)</li>
<li>for user principals: <em>never</em> automatically revoke certificates</li>
</ul>
<p>The revocation behaviour that occurs during <code>ipa cert-request</code> is actually defined in <code>ipa {host,service}-mod</code>. That is, when a <code>userCertificate</code> attribute value is removed, the removed certificates get revoked.</p>
<h2 id="one-certificate-per-service-a-bad-assumption">One certificate per service: a bad assumption?</h2>
<p>The automatic revocation regime makes a big assumption. Host or service principals are assumed to need only one certificate. This is usually the case. But it is not inconceivable that a service may need multiple certificates for different purposes. The current (intended) behaviour prevents a service from possessing multiple valid (non-revoked) certificates concurrently.</p>
<h2 id="certificate-issuance-scenarios">Certificate issuance scenarios</h2>
<p>Let us abandon the assumption that a host or service only needs one certificate at a time. There are three basic scenarios where <code>cert-request</code> would be revoked to issue a certificate to a particular principal. In each scenario, there are different motivations and consequences related to revocation. We will discuss each scenario in turn.</p>
<h3 id="certificate-for-new-purpose-non-renewal">Certificate for new purpose (non-renewal)</h3>
<p>A certificate is being requested for some new purpose. The subject may already have certs issued to it for other purposes. Existing certificates <em>should not be revoked</em>. FreeIPA’s revocation behaviour excludes this use case for host and service certificates.</p>
<h3 id="renewal-due-to-impending-expiry">Renewal due to impending expiry</h3>
<p>A certificate may be requested to renew an existing certificate. After the new certificate is issued, it does no harm to revoke the old certificate. But it is <em>not necessary to revoke</em> it; it will expire soon.</p>
<h3 id="renewal-for-other-reasons">Renewal for other reasons</h3>
<p>A certificate could be renewed in advance of its expiration time for any reasons (e.g. re-key due to compromise, add a Subject Alternative Name, etc.) Conservatively, we’ll lump all the possible reasons together and say that it is <em>necessary to revoke</em> the certificate that is being replaced.</p>
<p>What if the subject possesses multiple certificates for different purposes? Right now, for host and service principals we revoke them all.</p>
<h2 id="proposed-changes">Proposed changes</h2>
<p>A common theme is emerging. When we request a certificate, we want to revoke <em>at most one</em> certificate, i.e. the certificate being renewed (if any). This suggestion is applicable to service/host certificates as well as user certificates. It would admit the <em>multiple certificates for different purposes</em> use case for all principal types.</p>
<p>How do we get there from where we are now?</p>
<p>Observe that the <code>ipa cert-request</code> currently does not know (a) whether the request is a renewal or (b) what certificate is being renewed. Could we make <code>cert-request</code> smart enough to guess what it should do? Fuzzy heuristics that could be employed to make a guess, e.g. by examining certificate attributes, validity period, the subject public key, the profile and CA that were used, and so on. The guessing logic would be complex, and could not guarantee a correct answer. It is not the right approach.</p>
<p>Perhaps we could remove all revocation behaviour from <code>ipa cert-request</code>. This would actually be a matter of <em>suppressing</em> the revocation behaviour of <code>ipa {host,service}-mod</code>. Revocation has always been available via the <code>ipa cert-revoke</code> command. This approach makes revocation a separate, explicit step.</p>
<p>Note that renewals via <em>Certmonger</em> could perform revocation via <code>ipa cert-revoke</code> in the renewal helper. If you had to re-key or reissue a certificate via <code>getcert resubmit</code>, it could revoke the old certificate automatically. The nice thing here is that there is no guesswork involved. Certmonger <em>knows what cert it is tracking</em> so it can nominate the certificate to revoke and leave the subject’s other certificates alone.</p>
<p>A nice middle ground might be to add a new option to <code>ipa cert-request</code> to specify the certificate that is being renewed/replaced, so that <code>cert-request</code> can revoke just that certificate, and remove it from the subject principal’s LDAP entry. The command might look something like:</p>
<pre><code>% ipa cert-request /path/to/req.csr \
    --principal HTTP/www.example.com \
    --replace &quot;CN=Certificate Authority,O=EXAMPLE.COM;42&quot;</code></pre>
<p>The <code>replace</code> option specifies the issuer and serial number of the certificate being replaced. After the new certificate is issued, <code>ipa cert-request</code> would attempt to revoke the specified certificate, and remove it from the principal’s <code>userCertificate</code> attribute. Certmonger would be able to supply the <code>replace</code> option (or whatever we call it).</p>
<p>For any of the above suggestions it would be necessary to prominently and clearly outline the changes in release notes. The change in revocation behaviour could catch users off guard. It is important not to rush any changes through. We’ll need to engage with our user base to explain the changes, and outline steps to preserve the existing revocation behaviour if so desired.</p>
<h3 id="ipa-hostservice-mod-changes"><code>ipa {host,service}-mod</code> changes</h3>
<p>Another (independent) enhancement to consider is an option to suppress the revocation behaviour of <code>ipa {host,service}-mod</code>, so that certificates could be removed from host/service entries without revoking them. A simple <code>--no-revoke</code> flag would suffice.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this post I discussed how the current revocation behaviour of FreeIPA prevents hosts and services from using multiple certificates for different purposes. This is not the majority use case but I feel that we should support the use case. And we can, with a refinement of <code>ipa cert-request</code> behaviour.</p>
<p>We ought to make it possible to revoke <em>only the certificate being renewed</em>. We can do this by preventing <code>ipa cert-request</code> from revoking certs and requiring a separate call to <code>ipa cert-revoke</code>. behaviour of <code>cert-request</code> Alternatively, we can add an option to <code>ipa cert-request</code> for explicitly specifying the certificate(s) to revoke. In either case, the Certmonger renewal helpers can be changed to ensure that renewals via Certmonger revoke the old certificate (while leaving the subject’s other certificates alone!)</p>
<p>What do you think of the changes I’ve suggested? You can contribute to the <a href="https://lists.fedoraproject.org/archives/list/freeipa-devel@lists.fedorahosted.org/thread/G2BXRJNU5ATVXRNUPGE2Y4V3YJVXR7EC/">discussion</a> on the <em>freeipa-devel</em> mailing list.</p>]]></summary>
</entry>

</feed>
